<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Text.UI.Wpf</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition">
      <summary>Provides classification format information for a particular classification type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacity">
      <summary>Gets or sets the opacity of the background.</summary>
      <returns>The opacity.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacityId">
      <summary>Defines the string used to look up the background opacity value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CreateResourceDictionaryFromDefinition">
      <summary>Creates a <see cref="T:System.Windows.ResourceDictionary" /> using this definition.</summary>
      <returns>A <see cref="T:System.Windows.ResourceDictionary" /> with the values from this definition.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfo">
      <summary>Gets or sets the <see cref="T:System.Globalization.CultureInfo" /> for this classification format.</summary>
      <returns>The <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.CultureInfoId">
      <summary>Defines the string used to look up the <see cref="T:System.Globalization.CultureInfo" /> value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.DefaultBackgroundOpacity">
      <summary>Defines the default opacity used for the background color/brush if no <see cref="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.BackgroundOpacityId" /> entities are defined.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontHintingSize">
      <summary>Gets or sets the font hinting size for this classification format.</summary>
      <returns>The font hinting size.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontHintingSizeId">
      <summary>Defines the string used to look up the font hinting size value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontRenderingSize">
      <summary>Gets or sets the font rendering size for this classification format.</summary>
      <returns>The rendering size.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontRenderingSizeId">
      <summary>Defines the string used to look up the font rendering size value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.FontTypeface">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Typeface" /> for this classification format.</summary>
      <returns>The typeface.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.ForegroundOpacity">
      <summary>Gets or sets the opacity of the foreground.</summary>
      <returns>The foreground opacity.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.ForegroundOpacityId">
      <summary>Defines the string used to look up the foreground opacity value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsBold">
      <summary>Determines whether the text should be bold.</summary>
      <returns>true if the text is bold, otherwise false.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsBoldId">
      <summary>Defines the string used to look up the bold value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsItalic">
      <summary>Determines whether the text should be italic.</summary>
      <returns>true if the text is italic, otherwise false.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.IsItalicId">
      <summary>Defines the string used to look up the italic value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextDecorations">
      <summary>Gets or sets the <see cref="T:System.Windows.TextDecorationCollection" /> for this classification format.</summary>
      <returns>The text decorations.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextDecorationsId">
      <summary>Defines the string used to look up the text decorations value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextEffects">
      <summary>Gets or sets the the <see cref="T:System.Windows.Media.TextEffectCollection" /> for this classification format.</summary>
      <returns>The text effects.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TextEffectsId">
      <summary>Defines the string used look up the text effects value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition.TypefaceId">
      <summary>Defines the string used o look up the typeface value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition">
      <summary>Provides format information for a particular item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundBrush">
      <summary>Gets or sets the background brush for this item.</summary>
      <returns>The background brush.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundBrushId">
      <summary>Defines the string used to look up the background brush value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundColor">
      <summary>Gets or sets the background color for this item.</summary>
      <returns>The background color</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundColorId">
      <summary>Defines the string used to look up the background color value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.BackgroundCustomizable">
      <summary>Determines whether the background of this format is customizable.</summary>
      <returns>true if the background of this format is customizable, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.CreateResourceDictionary">
      <summary>Creates a <see cref="T:System.Windows.ResourceDictionary" /> from this definition.</summary>
      <returns>A <see cref="T:System.Windows.ResourceDictionary" /> with the values from this definition.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.CreateResourceDictionaryFromDefinition">
      <summary>Creates a <see cref="T:System.Windows.ResourceDictionary" /> from this definition.</summary>
      <returns>A <see cref="T:System.Windows.ResourceDictionary" /> with the values from this definition.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.DisplayName">
      <summary>Defines the string used when displaying this format definition to the user. This property is used only if the <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute" /> is set to true on this object's export.</summary>
      <returns>The display string.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundBrush">
      <summary>Gets or sets the foreground brush for this item.</summary>
      <returns>The foreground brush.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundBrushId">
      <summary>Defines the string used to look up the foreground brush value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundColor">
      <summary>Gets or sets the foreground color for this item.</summary>
      <returns>The foreground color.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundColorId">
      <summary>Defines the string used to look up the foreground color value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition.ForegroundCustomizable">
      <summary>Determines whether the foreground of this format is customizable.</summary>
      <returns>true if the foreground of this format is customizable, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.FormatMappingChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs" />.</summary>
      <param name="items">A collection of the items that have changed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.FormatItemsEventArgs.ChangedItems">
      <summary>Gets the formatting items that have changed.</summary>
      <returns>The format items that have changed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap">
      <summary>Maps from a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> to a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.AddExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
      <summary>Adds a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> to a new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</summary>
      <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</param>
      <param name="properties">The new properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="classificationType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.AddExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
      <summary>Adds a <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> to a new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</summary>
      <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</param>
      <param name="properties">The new properties.</param>
      <param name="priority">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that defines the relative priority of <paramref name="classificationType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="classificationType" />, <paramref name="properties" /> or <paramref name="priority" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="priority" /> does not exist in <see cref="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.CurrentPriorityOrder" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate">
      <summary>Begins a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" />. Events will not be raised until <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate" /> is called.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate" /> was called for a second time without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate" />.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged">
      <summary>Occurs when this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> changes.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.CurrentPriorityOrder">
      <summary>Gets a read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> objects supported by this format map, sorted by priority.</summary>
      <returns>A read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.DefaultTextProperties">
      <summary>Gets or sets the default properties that are applied to all classification types. The default properties contain the set of minimal properties required to render text properly.</summary>
      <returns>The default text properties.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate">
      <summary>Ends a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> and raises an event if any changes were made during the batch update.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.EndBatchUpdate" /> was called without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.BeginBatchUpdate" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetEditorFormatMapKey(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
      <summary>Gets the key used to store the associated properties of <paramref name="classificationType" /> in the underlying <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" />.</summary>
      <returns>The key.</returns>
      <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> whose key is returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
      <summary>Gets the explicit <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> for the specified classification type.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> whose text properties should be returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.GetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> for a given text classification type.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> object that represents the merged set of text properties from the specified classification type.</returns>
      <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> whose text properties should be merged.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="classificationType" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.IsInBatchUpdate">
      <summary>Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> is in the middle of a batch update.</summary>
      <returns>true if this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> is in the middle of a batch update, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetExplicitTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
      <summary>Sets the explicit <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> of an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</summary>
      <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</param>
      <param name="properties">The new properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
      <summary>Sets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> of an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</summary>
      <param name="classificationType">The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</param>
      <param name="properties">The new properties.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.SwapPriorities(Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
      <summary>Switches the priorities of two <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> objects.</summary>
      <param name="firstType">The first type.</param>
      <param name="secondType">The second type.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService">
      <summary>Looks up a classification format map for a given view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService.GetClassificationFormatMap(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> appropriate for the specified text view. This object is likely to be shared among multiple text views.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> for the view.</returns>
      <param name="textView">The view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService.GetClassificationFormatMap(System.String)">
      <summary>Gets a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> for the specified appearance category.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> for the category.</returns>
      <param name="category">The appearance category.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap">
      <summary>Maps from arbitrary keys to a <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.AddProperties(System.String,System.Windows.ResourceDictionary)">
      <summary>Adds a <see cref="T:System.Windows.ResourceDictionary" /> for a new key.</summary>
      <param name="key">The key.</param>
      <param name="properties">The new properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> already exists in the map.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate">
      <summary>Begins a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" />. Events will not be raised until <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate" /> is called.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate" /> was called for a second time without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate">
      <summary>Ends a batch update on this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" /> and raises an event if any changes were made during the batch update.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.EndBatchUpdate" /> was called without calling <see cref="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.BeginBatchUpdate" /> first.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.FormatMappingChanged">
      <summary>Occurs when this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" /> changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.GetProperties(System.String)">
      <summary>Gets a <see cref="T:System.Windows.ResourceDictionary" /> for the specified key.</summary>
      <returns>The <see cref="T:System.Windows.ResourceDictionary" /> object that represents the set of property contributions from the provided <see cref="T:Microsoft.VisualStudio.Text.Classification.EditorFormatDefinition" />.</returns>
      <param name="key">The key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is empty or null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.IsInBatchUpdate">
      <summary>Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" /> is in the middle of a batch update.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap.SetProperties(System.String,System.Windows.ResourceDictionary)">
      <summary>Sets the <see cref="T:System.Windows.ResourceDictionary" /> of a key.</summary>
      <param name="key">The key.</param>
      <param name="properties">The new <see cref="T:System.Windows.ResourceDictionary" /> of properties.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService">
      <summary>Looks up a format map for a given view role.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService.GetEditorFormatMap(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" /> appropriate for a given text view. This object is likely to be shared among several text views.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" /> for the text view.</returns>
      <param name="view">The view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IEditorFormatMapService.GetEditorFormatMap(System.String)">
      <summary>Get a <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" /> for a given appearance category.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" /> for the category.</returns>
      <param name="category">The appearance category.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition">
      <summary>Provides coloring information for text markers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.Border">
      <summary>The pen is used to draw the border of the text marker.</summary>
      <returns>The border <see cref="T:System.Windows.Media.Pen" />.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.BorderId">
      <summary>The string used to look up the border pen value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.CreateResourceDictionaryFromDefinition">
      <summary>Creates a <see cref="T:System.Windows.ResourceDictionary" /> using this definition.</summary>
      <returns>A <see cref="T:System.Windows.ResourceDictionary" /> with the values from this definition.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.Fill">
      <summary>The brush is used to paint the inner body of the text marker.</summary>
      <returns>The fill <see cref="T:System.Windows.Media.Brush" />.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.FillId">
      <summary>The string used to lookup the fill brush value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.ZOrder">
      <summary>Represents the Z-order of the marker when it is drawn on the text marker adornment layer. </summary>
      <returns>The marker Z-order.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.MarkerFormatDefinition.ZOrderId">
      <summary>The string used to lookup the z-order value in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.Priority">
      <summary>Represents the built-in priorities for a classification format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.Default">
      <summary>The default priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.High">
      <summary>High priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Classification.Priority.Low">
      <summary>Low priority.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute">
      <summary>Determines whether an export should be visible to the user.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute" />.</summary>
      <param name="userVisible">true if the extension is visible to the user, otherwise false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Classification.UserVisibleAttribute.UserVisible">
      <summary>Determines whether the extension is visible to the user.</summary>
      <returns>true if the extension is visible to the user, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.CreateTextViewHostCallback"></member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceTextViewModel"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceTextViewModel.Viewer"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceTextViewModel.ViewType"></member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.Initialize(Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer,Microsoft.VisualStudio.Text.Differencing.CreateTextViewHostCallback,Microsoft.VisualStudio.Text.Editor.IEditorOptions)"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.InlineHost"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.InlineView"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.IsInitialized"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.LeftHost"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.LeftView"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.RightHost"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.RightView"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewer.VisualElement"></member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewerFactoryService"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewerFactoryService.CreateDifferenceView(Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer,Microsoft.VisualStudio.Text.Differencing.CreateTextViewHostCallback,Microsoft.VisualStudio.Text.Editor.IEditorOptions)"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewerFactoryService.CreateDifferenceView(Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer,Microsoft.VisualStudio.Text.Editor.IEditorOptions)"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewerFactoryService.CreateDifferenceView(Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewerFactoryService.CreateUninitializedDifferenceView"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IWpfDifferenceViewerFactoryService.TryGetViewerForTextView(Microsoft.VisualStudio.Text.Editor.ITextView)"></member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition">
      <summary>Provides information for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer" /> export.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior">
      <summary>Defines the positioning of adornments.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.OwnerControlled">
      <summary>The adornment is not moved automatically.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.ViewportRelative">
      <summary>The adornment is positioned relative to the top left corner of the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.TextRelative">
      <summary>The adornment is positioned relative to the text in the view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback">
      <summary>Defines the behavior when a <see cref="T:System.Windows.UIElement" /> is removed from an <see cref="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer" />.</summary>
      <param name="tag">The tag associated with <paramref name="element" />. </param>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> removed from the view.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption">
      <summary>Represents the appearance category option.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption.Default">
      <summary>Gets the default value.</summary>
      <returns>The default value, which is "text".</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.AppearanceCategoryOption.Key">
      <summary>Gets the key for the highlight current line option.</summary>
      <returns>The key for the highlight current line option..</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.IWpfTextView.BackgroundBrushChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs.#ctor(System.Windows.Media.Brush)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs" />.</summary>
      <param name="newBackgroundBrush">The new <see cref="T:System.Windows.Media.Brush" /> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newBackgroundBrush" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.BackgroundBrushChangedEventArgs.NewBackgroundBrush">
      <summary>Gets the new <see cref="T:System.Windows.Media.Brush" /> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
      <returns>The new background brush.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl">
      <summary>Highlights an outlining region in the text view when the mouse hovers over this region in the outlining margin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl)">
      <summary>Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty" />.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty" />.</returns>
      <param name="control">The <see cref="T:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlighted">
      <summary>Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty" />.</summary>
      <returns>true if the control is highlighted, otherwise false.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty">
      <summary>A <see cref="T:System.Windows.DependencyProperty" /> that determines whether this control should be currently displaying its mouse-hover highlight.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl,System.Boolean)">
      <summary>Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl.IsHighlightedProperty" />.</summary>
      <param name="control">The <see cref="T:Microsoft.VisualStudio.Text.Editor.CollapseHintAdornmentControl" />.</param>
      <param name="isExpanded">true if the control is highlighted, otherwise false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ConnectionReason">
      <summary>Defines the reasons for connecting or disconnecting a text buffer and a text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.TextViewLifetime">
      <summary>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> has been opened or closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.ContentTypeChange">
      <summary>The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> of the subject buffer has changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.BufferGraphChange">
      <summary>A buffer has been added to or removed from <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions">
      <summary>Represents common <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.AppearanceCategory">
      <summary>Determines the appearance category of a view, which selects a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap" /> and <see cref="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMap" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.AppearanceCategoryName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableHighlightCurrentLineId">
      <summary>Determines whether to enable the highlight current line adornment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableHighlightCurrentLineName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableMouseWheelZoomId">
      <summary>Determines whether to enable mouse wheel zooming.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableMouseWheelZoomName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableSimpleGraphicsId">
      <summary>Determines whether to enable the highlight current line adornment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableSimpleGraphicsName"></member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.EditorStyleNames"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.EditorStyleNames.CollapsedAdornmentToolTipStyleName"></member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute">
      <summary>This class associates a grid cell size with a MEF export.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute.#ctor(System.Double)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute" />.</summary>
      <param name="cellLength">The length of the cell.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.GridCellLengthAttribute.GridCellLength">
      <summary>Gets the length of the cell.</summary>
      <returns>The length of the cell.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute">
      <summary>This class associates a <see cref="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType" /> value with a MEF export.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.#ctor(System.Windows.GridUnitType)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute" />.</summary>
      <param name="gridUnitType">The <see cref="T:System.Windows.GridUnitType" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.GridUnitTypeAttribute.GridUnitType">
      <summary>Gets the grid unit type.</summary>
      <returns>The <see cref="T:System.Windows.GridUnitType" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption">
      <summary>Represents the option to highlight the current line.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption.#ctor">
      <summary>Initializes a new instance <see cref="T:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.HighlightCurrentLineOption.Key">
      <summary>Gets the key for the highlight current line option.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableSimpleGraphicsId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer">
      <summary>Represents an adornment layer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.AddAdornment(Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior,System.Nullable{Microsoft.VisualStudio.Text.SnapshotSpan},System.Object,System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
      <summary>Adds a <see cref="T:System.Windows.UIElement" /> to the layer.</summary>
      <returns>true if <paramref name="adornment" /> was added to the layer, otherwise false. <paramref name="visualSpan" /> does not intersect the text that is visible in the view.</returns>
      <param name="behavior">The positioning behavior of <paramref name="adornment" />.</param>
      <param name="visualSpan">The span with which <paramref name="adornment" /> is associated.</param>
      <param name="tag">The tag associated with <paramref name="adornment" />.</param>
      <param name="adornment">The <see cref="T:System.Windows.UIElement" /> to add to the view.</param>
      <param name="removedCallback">The delegate to call when <paramref name="adornment" /> is removed from the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.AddAdornment(Microsoft.VisualStudio.Text.SnapshotSpan,System.Object,System.Windows.UIElement)">
      <summary>Adds a <see cref="T:System.Windows.UIElement" /> that is <see cref="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.TextRelative" /> to the layer.</summary>
      <returns>true if <paramref name="adornment" /> was added to the layer, otherwise false. <paramref name="visualSpan" /> does not intersect the text that is visible in the view.</returns>
      <param name="visualSpan">The span with which <paramref name="adornment" /> is associated.</param>
      <param name="tag">The tag associated with <paramref name="adornment" />.</param>
      <param name="adornment">The <see cref="T:System.Windows.UIElement" /> to add to the view.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.Elements">
      <summary>Gets a collection of the adornments and their associated data in the layer.</summary>
      <returns>The adornments and their data.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.IsEmpty">
      <summary>Determines whether this layer is empty, that is, it does not contain any adornments.</summary>
      <returns>true if the layer is empty, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.Opacity">
      <summary>Gets or sets the opacity factor applied to the entire adornment layer when it is rendered in the user interface.</summary>
      <returns>The opacity factor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornment(System.Windows.UIElement)">
      <summary>Removes a specific <see cref="T:System.Windows.UIElement" />.</summary>
      <param name="adornment">
        <see cref="T:System.Windows.UIElement" /> to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornmentsByTag(System.Object)">
      <summary>Removes all <see cref="T:System.Windows.UIElement" /> objects associated with a particular tag.</summary>
      <param name="tag">The tag to use to remove the UI elements..</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAdornmentsByVisualSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Removes all adornments with visual spans that overlap the given visual span. </summary>
      <param name="visualSpan">The visual span to check for overlap with adornments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveAllAdornments">
      <summary>Removes all <see cref="T:System.Windows.UIElement" /> objects in the layer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveMatchingAdornments(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement})">
      <summary>Removes all matching adornments with visual spans \.</summary>
      <param name="visualSpan">The visual span to check for overlap with adornments.</param>
      <param name="match">The predicate that will be called for each adornment</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.RemoveMatchingAdornments(System.Predicate{Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement})">
      <summary>Removes all matching adornments.</summary>
      <param name="match">The predicate that will be called for each adornment</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer.TextView">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> to which this layer is attached.</summary>
      <returns>The text view.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement">
      <summary>Defines an element in an adornment layer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Adornment">
      <summary>Gets the adornment.</summary>
      <returns>The adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Behavior">
      <summary>Gets the positioning behavior of the adornment.</summary>
      <returns>The positioning behavior.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.RemovedCallback">
      <summary>Defines the behavior when an adornment has been removed.</summary>
      <returns>The removal callback.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.Tag">
      <summary>Gets the tag associated with the adornment.</summary>
      <returns>The tag.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IAdornmentLayerElement.VisualSpan">
      <summary>Gets the snapshot span that is associated with the adornment.</summary>
      <returns>The snapshot span.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory">
      <summary>Provides a visual for a specific glyph type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphFactory.GenerateGlyph(Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine,Microsoft.VisualStudio.Text.Editor.IGlyphTag)">
      <summary>Generates a new glyph visual for the given line.</summary>
      <returns>The visual element for the given tag.</returns>
      <param name="line">The line that this glyph will be placed on.</param>
      <param name="tag">Information about the glyph for which the visual is being generated.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider">
      <summary>Provides an <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider.GetGlyphFactory(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory" /> for the given text view and margin.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory" /> for the given view and margin.</returns>
      <param name="view">The view for which the factory is being created.</param>
      <param name="margin">The margin for which the factory will create glyphs.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider">
      <summary>Provides a mouse binding for the glyph margin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider.GetAssociatedMouseProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor" /> for the glyph margin, given a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" /> and a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor" /> for the glyph margin. The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider" /> does not participate.</returns>
      <param name="wpfTextViewHost">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" /> associated with the glyph margin.</param>
      <param name="margin">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphTag">
      <summary>Represents a glyph tag, which is consumed by the glyph margin to place glyph visuals.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider.GetAssociatedProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
      <returns>The created <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor" />. The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IKeyProcessorProvider" /> does not wish to participate in the current context.</returns>
      <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ImeTextComposition">
      <summary>Represents a text composition generated by the IME processing of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ImeTextComposition.#ctor(System.Windows.Input.InputManager,System.Windows.IInputElement,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ImeTextComposition" />.</summary>
      <param name="inputManager">The <see cref="T:System.Windows.Input.InputManager" />.</param>
      <param name="source">The input element.</param>
      <param name="resultText">The text.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor">
      <summary>Provides extensions for mouse bindings.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragEnter(System.Windows.DragEventArgs)">
      <summary>Handles a drag enter event after the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragLeave(System.Windows.DragEventArgs)">
      <summary>Handles a drag leave event after the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDragOver(System.Windows.DragEventArgs)">
      <summary>Handles a drag over event after the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessDrop(System.Windows.DragEventArgs)">
      <summary>Handles a drop event after the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> describing the drop operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Handles a <see cref="E:System.Windows.DragDrop.GiveFeedback" /> event after the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.GiveFeedbackEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse down event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse down event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Handles a mouse enter event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse enter event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Handles a mouse leave event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse leave event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse left button down event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse left button down event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse left button up event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse left button up event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Handles a mouse move event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse move event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse right button down event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse right button down event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse right button up event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse right button up event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse up event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse up event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Handles a mouse wheel event after the default handler.</summary>
      <param name="e">Event arguments that describe the mouse wheel event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PostprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Handles a <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> event after the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.QueryContinueDragEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragEnter(System.Windows.DragEventArgs)">
      <summary>Handles a drag enter event before the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragLeave(System.Windows.DragEventArgs)">
      <summary>Handles a drag leave event before the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDragOver(System.Windows.DragEventArgs)">
      <summary>Handles a drag over event before the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessDrop(System.Windows.DragEventArgs)">
      <summary>Handles a drop event before the default handler.</summary>
      <param name="e">
        <see cref="T:System.Windows.DragEventArgs" /> describing the drop operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Handles a <see cref="E:System.Windows.DragDrop.GiveFeedback" /> event before the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.GiveFeedbackEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse down event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse down event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Handles a mouse enter event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse enter event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Handles a mouse leave event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse leave event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse left button down event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse left button down event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse left button up event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse left button up event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Handles a mouse move event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse move event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse right button down event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse right button down event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse right button up event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse right button up event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles a mouse up event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse up event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Handles a mouse wheel event before the default handler.</summary>
      <param name="e">Event arguments that describe the mouse wheel event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessor.PreprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Handles a <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> event before the default handler.</summary>
      <param name="e">A <see cref="T:System.Windows.QueryContinueDragEventArgs" /> describing the drag operation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider">
      <summary>Creates a WPF mouse processor for a given text view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider.GetAssociatedProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor" /> for a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
      <returns>The created <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor" />. The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessorProvider" /> does not wish to participate in the current context.</returns>
      <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.IMouseProcessor" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment">
      <summary>Support for intra-text adornments that are provided with <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag" /> objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.GetIsSelected(System.Windows.UIElement)">
      <summary>Gets the IsSelected value on the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>true if the element is selected, otherwise false.</returns>
      <param name="element">The element.</param>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.IsSelected">
      <summary>Represents the IsSelected property of these adornments.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornment.SetIsSelected(System.Windows.UIElement,System.Boolean)">
      <summary>Sets the IsSelected value on the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <param name="element">The element.</param>
      <param name="isSelected">The IsSelected value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag">
      <summary>Represents a tag that provides adornments to be interspersed with text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag" />.</summary>
      <param name="adornment">The adornment to be displayed at the position of the tag. Must not be null.</param>
      <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback,System.Nullable{Microsoft.VisualStudio.Text.PositionAffinity})">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag" />.</summary>
      <param name="adornment">The adornment to be displayed at the position of the tag. Must not be null.</param>
      <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
      <param name="affinity">The affinity of the adornment. Must be null if the adornment has a zero-length span in the text buffer of the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.#ctor(System.Windows.UIElement,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{Microsoft.VisualStudio.Text.PositionAffinity})">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag" />.</summary>
      <param name="adornment">The adornment to be displayed at the position of the tag. Must not be null.</param>
      <param name="removalCallback">Called when adornment is removed from the view. May be null.</param>
      <param name="topSpace">The amount of space that is required between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
      <param name="baseline">The baseline of the space-negotiating adornment.</param>
      <param name="textHeight">The height of the text portion of the space-negotiating adornment.</param>
      <param name="bottomSpace">The amount of space that is required between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
      <param name="affinity">The affinity of the adornment. Must be null if the adornment has a non-zero-length span in the text buffer of the view.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Adornment">
      <summary>Gets the adornment to be displayed at the position of the tag. Must not be null.</summary>
      <returns>The adornment to be displayed at the position of the tag. Must not be null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Affinity">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the space-negotiating adornment.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.Baseline">
      <summary>Gets the baseline of the space-negotiating adornment.</summary>
      <returns>The baseline of the space-negotiating adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.BottomSpace">
      <summary>Gets the amount of space that is required between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>The amount of space that is required between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.RemovalCallback">
      <summary>Called when adornment is removed from the view. May be null.</summary>
      <returns>The callback.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.TextHeight">
      <summary>Gets the height of the text portion of the space-negotiating adornment.</summary>
      <returns>The height of the text portion of the space-negotiating adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IntraTextAdornmentTag.TopSpace">
      <summary>Gets the amount of space that is required between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>The amount of space that is required between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent">
      <summary>Handles the display of space reservation adornments.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.GotFocus">
      <summary>Occurs when the adornment created by the agent gets focus.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.HasFocus">
      <summary>Determines whether the adornment created by the space reservation agent has keyboard focus.</summary>
      <returns>true if the adornment has focus, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.Hide">
      <summary>Called whenever the content of the space reservation agent should be hidden.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.IsMouseOver">
      <summary>Determines whether the mouse is over this agent or anything it contains.</summary>
      <returns>true if the mouse is over the adornment, otherwise false.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.LostFocus">
      <summary>Occurs when the adornment created by the agent loses focus.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent.PositionAndDisplay(System.Windows.Media.Geometry)">
      <summary>Positions and displays the contents of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent" />.</summary>
      <returns>The space. If this method returns null, the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager" /> will remove the agent.</returns>
      <param name="reservedSpace">Currently reserved space.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager">
      <summary>Manages space reservation adornments.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.AddAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
      <summary>Adds a space reservation agent to the list of agents managed by this manager.</summary>
      <param name="agent">The agent to add.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.AgentChanged">
      <summary>Occurs when the agent is changed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.Agents">
      <summary>Gets the list of agents managed by this manager.</summary>
      <returns>The agents.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.CreatePopupAgent(Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles,System.Windows.UIElement)">
      <summary>Creates a default implementation of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent" /> that displays its content in a popup window.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent" /> that displays the content in a popup window.</returns>
      <param name="visualSpan">The span of text associated with the popup window.</param>
      <param name="style">The style options for displaying the popup window.</param>
      <param name="content">The UI element to be displayed in the popup window.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.GotAggregateFocus">
      <summary>Occurs when any of the adornments managed by this space reservation manager gets keyboard focus.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.HasAggregateFocus">
      <summary>Determines whether the adornment created by the space reservation agent has keyboard focus.</summary>
      <returns>true if the adornment has focus, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.IsMouseOver">
      <summary>Determines whether the mouse is over an agent managed by this manager.</summary>
      <returns>true if the mouse is over the adornment, otherwise false.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.LostAggregateFocus">
      <summary>Occurs when keyboard focus is lost by any of the adornments managed by this space reservation manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.RemoveAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
      <summary>Removes the specified space reservation agent from the list of agents managed by this manager.</summary>
      <returns>true if the agent was in the list of agents to remove, otherwise false.</returns>
      <param name="agent">The agent to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.UpdatePopupAgent(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent,Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
      <summary>Updates the specified agent with the specified span. </summary>
      <param name="agent">The agent to add.</param>
      <param name="visualSpan">The agent's new visual span.</param>
      <param name="styles">The popup styles.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService">
      <summary>Creates editor views.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.AllPredefinedRoles">
      <summary>The set of all predefined text view roles.</summary>
      <returns>All the predefined text view roles.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> on a newly created <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> having content type "text".</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.Editor.ITextViewModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> that displays the contents of the specified view model.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</returns>
      <param name="viewModel">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> that provides the text buffers for the view.</param>
      <param name="roles">The set of roles filled by the view.</param>
      <param name="parentOptions">The options environment for the text view.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewModel" /> or <paramref name="roles" /> or <paramref name="parentOptions" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> that displays the contents of the specified text buffer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> having all predefined text view roles.</returns>
      <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> that provides the text for the view.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textBuffer" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> that displays the contents of the specified text buffer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</returns>
      <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> that provides the text for the view.</param>
      <param name="roles">The set of roles filled by the view.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textBuffer" /> or <paramref name="roles" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> that displays the contents of the specified text buffer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</returns>
      <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> that provides the text for the view.</param>
      <param name="roles">The set of roles filled by the view.</param>
      <param name="parentOptions">The options environment for the text view.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textBuffer" /> or <paramref name="roles" /> or <paramref name="parentOptions" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextView(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> that displays the contents of the data model.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</returns>
      <param name="dataModel">The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> that provides the text buffers over which an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> will be built for the view.</param>
      <param name="roles">The set of roles filled by the view.</param>
      <param name="parentOptions">The options environment for the text view.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataModel" /> or <paramref name="roles" /> or <paramref name="parentOptions" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewHost(Microsoft.VisualStudio.Text.Editor.IWpfTextView,System.Boolean)">
      <summary>Creates a host for the text view.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</returns>
      <param name="wpfTextView">The text view to host.</param>
      <param name="setFocus">true if the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" /> should take focus after it is initialized, false otherwise.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wpfTextView" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewRoleSet(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet" /> containing the given roles.</summary>
      <returns>The text view role set.</returns>
      <param name="roles">The roles.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="roles" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewRoleSet(System.String[])">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet" /> containing the given roles.</summary>
      <returns>The text view role set.</returns>
      <param name="roles">The roles.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.DefaultRoles">
      <summary>The set of roles that are used when creating a text view without specifying text view roles.</summary>
      <returns>The default roles.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.NoRoles">
      <summary>The empty text view role set.</summary>
      <returns>An empty text view role set.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.TextViewCreated">
      <summary>Raised when a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is created.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView">
      <summary>Represents a Visual Studio <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for the Windows Presentation Foundation (WPF) platform.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.Background">
      <summary>Gets or sets the background for the visual element.</summary>
      <returns>The background for the visual element.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextView.BackgroundBrushChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.Background" /> is set.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.FormattedLineSource">
      <summary>Gets the text formatter used by the view.</summary>
      <returns>The text formatter used by the view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetAdornmentLayer(System.String)">
      <summary>Gets a named <see cref="T:Microsoft.VisualStudio.Text.Editor.IAdornmentLayer" />.</summary>
      <returns>An instance of the layer in this view.</returns>
      <param name="name">The name of the layer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetSpaceReservationManager(System.String)">
      <summary>Gets a named <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager" />.</summary>
      <returns>An instance of the manager in this view.</returns>
      <param name="name">The name of the manager.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is not registered through a <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> that contains the specified text buffer position.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> that contains the specified buffer position.</returns>
      <param name="bufferPosition">The text buffer position that is used to search for a text line.</param>
      <exception cref="T:System.InvalidOperationException">The view has not completed initialization.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> is not a valid buffer position.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.LineTransformSource">
      <summary>Gets the line transformer used by the view.</summary>
      <returns>The line transformer used by the view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.TextViewLines">
      <summary>Gets the text view lines as an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection" />.</summary>
      <returns>The text view lines as an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.VisualElement">
      <summary>Gets the <see cref="T:System.Windows.FrameworkElement" /> that renders the view.</summary>
      <returns>The <see cref="T:System.Windows.FrameworkElement" /> that renders the view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevel">
      <summary>Gets or sets the zoom level for the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> between 20% to 400%.</summary>
      <returns>The zoom level for the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> between 20% to 400%.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevelChanged">
      <summary>Occurs when the <see cref="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevel" /> is set.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener">
      <summary>Listens to text buffers of a particular content type to find out when they are opened or closed in the text editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener.SubjectBuffersConnected(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.ConnectionReason,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Text.ITextBuffer})">
      <summary>Called when one or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects of the appropriate <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> are connected to a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> to which the subject buffers are being connected.</param>
      <param name="reason">The cause of the connection.</param>
      <param name="subjectBuffers">The non-empty list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects with matching content types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewConnectionListener.SubjectBuffersDisconnected(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.ConnectionReason,System.Collections.ObjectModel.Collection{Microsoft.VisualStudio.Text.ITextBuffer})">
      <summary>Called when one or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects no longer satisfy the conditions for being included in the subject buffers.</summary>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> from which the subject buffers are being disconnected.</param>
      <param name="reason">The cause of the disconnection.</param>
      <param name="subjectBuffers">The non-empty list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewCreationListener">
      <summary>Listens to text view created events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewCreationListener.TextViewCreated(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
      <summary>Called when a text view having matching roles is created over a text data model having a matching content type.</summary>
      <param name="textView">The newly created text view.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost">
      <summary>Contains an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> and the margins that surround it, such as a scrollbar or line number gutter.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.Close">
      <summary>Closes the text view host and its underlying text view.</summary>
      <exception cref="T:System.InvalidOperationException">The text view host is already closed.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.Closed">
      <summary>Occurs immediately after closing the text view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.GetTextViewMargin(System.String)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" /> with the specified margin name that is attached to an edge of this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" /> with a name that matches <paramref name="marginName" />.</returns>
      <param name="marginName">The name of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="marginName" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.HostControl">
      <summary>Gets the WPF control for this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</summary>
      <returns>The WPF control for this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.IsClosed">
      <summary>Determines whether this text view has been closed.</summary>
      <returns>true if the text view has been closed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost.TextView">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> that is contained within this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> that is contained within this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection">
      <summary>Allows the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to access the view's collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects. You can use the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines" /> property to get an instance of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection" /> interface. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.FirstVisibleLine">
      <summary>Gets the first line that is not completely hidden.</summary>
      <returns>The first line that is not completely hidden.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate the outline path of the text regions.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that contains the bounds of all of the formatted text in the span. It is null if the span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
      <param name="bufferSpan">The span of text.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSpan" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of the buffer.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetLineMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
      <summary>Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate the outline path of the text regions.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that contains the bounds of all of the formatted text in the span. It is null if the span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
      <param name="bufferSpan">The span of text.</param>
      <param name="clipToViewport">If true, the created geometry will be clipped to the viewport.</param>
      <param name="padding">A padding that's applied to the elements on a per line basis.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSpan" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> o  the buffer.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Creates a marker geometry for the specified snapshot span.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that contains the bounds of all of the formatted text in <paramref name="bufferSpan" />.</returns>
      <param name="bufferSpan">The span of text.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSpan" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> on the buffer.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
      <summary>Creates a marker geometry for the specified snapshot span. </summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that contains the bounds of all of the formatted text in <paramref name="bufferSpan" />.</returns>
      <param name="bufferSpan">The span of text.</param>
      <param name="clipToViewport">If true, the created geometry will be clipped to the viewport.</param>
      <param name="padding">A padding that's applied to the elements on a per line basis.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate the outline path of the text regions.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that contains the bounds of all of the formatted text in the span. It is null if the span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
      <param name="bufferSpan">The span of text.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSpan" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> on the buffer.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextMarkerGeometry(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Windows.Thickness)">
      <summary>Gets the text marker geometry for the specified range of text in the buffer by using a polygonal approximation algorithm to calculate the outline path of the text regions.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that contains the bounds of all of the formatted text in the span. It is null if the span is empty or does not intersect the text formatted in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
      <param name="bufferSpan">The span of text.</param>
      <param name="clipToViewport">If true, the created geometry will be clipped to the viewport.</param>
      <param name="padding">A padding that's applied to the elements on a per line basis.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSpan" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> on the buffer.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> that contains the specified text buffer position.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the position, or null if none exist.</returns>
      <param name="bufferPosition">The text buffer position used to search for a text line.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> is not a valid buffer position.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.Item(System.Int32)">
      <summary>Get the <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> at <paramref name="index" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" />.</returns>
      <param name="index">The zero based index of the item</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.LastVisibleLine">
      <summary>Gets the last line that is not completely hidden.</summary>
      <returns>The last line that is not completely hidden.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewLineCollection.WpfTextViewLines">
      <summary>Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> objects.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> objects.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin">
      <summary>Represents WPF text view margins.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin.VisualElement">
      <summary>Gets the <see cref="T:System.Windows.FrameworkElement" /> that renders the margin.</summary>
      <returns>The <see cref="T:System.Windows.FrameworkElement" /> that renders the margin.</returns>
      <exception cref="T:System.ObjectDisposedException">if the margin is disposed.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider.CreateMargin(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin" /> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin" />. </returns>
      <param name="wpfTextViewHost">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" /> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin" />.</param>
      <param name="marginContainer">The margin that will contain the newly-created margin.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor">
      <summary>Processes the keyboard input of the editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.KeyProcessor.IsInterestedInHandledEvents">
      <summary>Determines whether this processor should be called for events that have been handled by earlier <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor" /> objects.</summary>
      <returns>true if this processor should be called for events that have been handled by earlier <see cref="T:Microsoft.VisualStudio.Text.Editor.KeyProcessor" /> objects, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.KeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Handles the KeyDown event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.KeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Handles the KeyUp event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Handles the PreviewKeyDown event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Handles the PreviewKeyUp event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Handles the PreviewTextInput event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInputStart(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Handles the PreviewTextInputStart event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.PreviewTextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Handles the PreviewTextInputUpdate event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Handles the TextInput event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInputStart(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Handles the TextInputStart event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.KeyProcessor.TextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Handles the TextInputUpdate event.</summary>
      <param name="args">A <see cref="T:System.Windows.Input.KeyEventArgs" /> describing the key event.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase">
      <summary>Provides a base implementation for mouse bindings, so that clients can override only the methods they need.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragEnter(System.Windows.DragEventArgs)">
      <summary>Handles the drag enter event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragLeave(System.Windows.DragEventArgs)">
      <summary>Handles the drag leave event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDragOver(System.Windows.DragEventArgs)">
      <summary>Handles the drag over event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessDrop(System.Windows.DragEventArgs)">
      <summary>Handles the drop event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Handles the feedback event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse down event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Handles the mouse enter event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Handles the mouse leave event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse left button down event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse left button up event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Handles the mouse move event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse right button down event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse right button up event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse up event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Handles the mouse wheel event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PostprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Handles the query continue drag event after the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragEnter(System.Windows.DragEventArgs)">
      <summary>Handles the drag enter event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragLeave(System.Windows.DragEventArgs)">
      <summary>Handles the drag leave event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDragOver(System.Windows.DragEventArgs)">
      <summary>Handles the drag over event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessDrop(System.Windows.DragEventArgs)">
      <summary>Handles the drop event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Handles the feedback event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse down event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Handles the mouse enter event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Handles the mouse leave event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse left button down event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse left button up event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Handles the mouse move event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse right button down event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse right button up event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Handles the mouse up event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Handles the mouse wheel event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> event arguments.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseProcessorBase.PreprocessQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Handles the query continue drag event before the default handler.</summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> event arguments.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled">
      <summary>Defines the option to enable the mouse wheel zoom</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.MouseWheelZoomEnabled.Key">
      <summary>Gets the WPF text view value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableMouseWheelZoomId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningCollapsedAdornmentControl">
      <summary>Represents collapsed text in the text view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningCollapsedAdornmentControl.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningCollapsedAdornmentControl" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl">
      <summary>Indicates the vertical extent of an expanded outlining region and allows the user to collapse it.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffset">
      <summary>Gets or sets the first line offset.</summary>
      <returns>The first line offset.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.FirstLineOffsetProperty">
      <summary>A <see cref="T:System.Windows.DependencyProperty" /> that indicates the vertical offset that the bracket control should use to render itself.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.GetFirstLineOffset(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl)">
      <summary>Gets the first line offset.</summary>
      <returns>The first line offset.</returns>
      <param name="control">The control.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl)">
      <summary>Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty" />.</summary>
      <returns>true if the control is highlighted, otherwise false.</returns>
      <param name="control">The <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlighted">
      <summary>Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty" />.</summary>
      <returns>true if the control is highlighted, otherwise false.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty">
      <summary>A <see cref="T:System.Windows.DependencyProperty" /> that determines whether this control should be currently displaying its mouse-hover highlight.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.OnIsHighlightedChanged(System.Boolean)">
      <summary>The event handler called when the IsHighlighted property is changed.</summary>
      <param name="newValue">The new value of <see cref="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlighted" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.SetFirstLineOffset(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl,System.Double)">
      <summary>Sets the first line offset property.</summary>
      <param name="control">The control.</param>
      <param name="firstLineOffset">The first line offset.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl,System.Boolean)">
      <summary>Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl.IsHighlightedProperty" />.</summary>
      <param name="control">The <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginBracketControl" />.</param>
      <param name="isExpanded">true if the control is highlighted, otherwise false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginControl">
      <summary>Represents the outlining margin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginControl.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginControl" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl">
      <summary>Enables an outlining region to be collapsed and expanded.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.GetIsExpanded(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl)">
      <summary>Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty" />.</summary>
      <returns>true if the control is expanded; otherwise, false.</returns>
      <param name="control">The <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.GetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl)">
      <summary>Gets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty" />.</summary>
      <returns>true if the control is highlighted; otherwise, false.</returns>
      <param name="control">The <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpanded">
      <summary>Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty" />.</summary>
      <returns>true if the control is expanded; otherwise, false.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty">
      <summary>A <see cref="T:System.Windows.DependencyProperty" /> that determines whether this control collapses or expands the outlining regions that it controls.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlighted">
      <summary>Gets or sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty" />.</summary>
      <returns>true if the control is highlighted; otherwise, false.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty">
      <summary>A <see cref="T:System.Windows.DependencyProperty" /> that determines whether this control should display its mouse-hover highlight.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.SetIsExpanded(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl,System.Boolean)">
      <summary>Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsExpandedProperty" />.</summary>
      <param name="control">The <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl" />.</param>
      <param name="isExpanded">true if the control is expanded; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.SetIsHighlighted(Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl,System.Boolean)">
      <summary>Sets <see cref="F:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl.IsHighlightedProperty" />.</summary>
      <param name="control">The <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginHeaderControl" />.</param>
      <param name="isExpanded">true if the control is highlighted; otherwise, false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers">
      <summary>Includes the names of the adornment layers predefined by the editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Caret">
      <summary>The layer that contains the text caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.CurrentLineHighlighter"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.DifferenceChanges"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.DifferenceSpace"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Outlining">
      <summary>The layer that contains the collapse hint adornment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Selection">
      <summary>The layer that hosts the selection text caret for IME input mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Squiggle">
      <summary>The layer that contains the squiggle adornment used to indicate errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.Text">
      <summary>The layer that contains the textual content of the editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedAdornmentLayers.TextMarker">
      <summary>The layer that contains the text markers provided by the <see cref="T:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory" /> classes.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption">
      <summary>Represents the option to draw a selection gradient as opposed to a solid color selection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption.Default">
      <summary>Gets the default value.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.SimpleGraphicsOption.Key">
      <summary>Gets the key for the highlight current line option.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultWpfViewOptions.EnableSimpleGraphicsId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager.AgentChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent,Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs" />.</summary>
      <param name="oldAgent">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent" /> associated with the previous value.</param>
      <param name="newAgent">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationAgent" /> associated with the new value.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.NewAgent">
      <summary>Gets the new agent.</summary>
      <returns>The new agent.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs.OldAgent">
      <summary>Gets the old agent.</summary>
      <returns>The old agent.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition">
      <summary>Represents metadata for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISpaceReservationManager" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.SpaceReservationManagerDefinition" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.WpfTextViewKeyboardFilterName">
      <summary>Represents the KeyboardFilter ordering name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.WpfTextViewKeyboardFilterName.KeyboardFilterOrderingName">
      <summary>The value of the Name attribute on the IKeyboardFilterProvider production. You can use this name to order other keyboard filters relative to the keyboard filter that performs command keybinding dispatching.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1">
      <summary>Defines an editor option specific to an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
      <typeparam name="T">The type of the option.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.WpfViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
      <summary>Determines whether this definition is applicable only to text views.</summary>
      <returns>true if scope is an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />, otherwise false.</returns>
      <param name="scope">The scope</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomControl">
      <summary>Represents a zoom control in the text view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomControl.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ZoomControl" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomControl.GetSelectedZoomLevel(System.Windows.DependencyObject)">
      <summary>Gets the SelectedZoomLevelProperty.</summary>
      <returns>A double representing the selected zoom level.</returns>
      <param name="control">
        <see cref="T:System.Windows.DependencyProperty" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevel">
      <summary>Gets or sets the SelectedZoomLevelProperty.</summary>
      <returns>The selected zoom level.</returns>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomControl.SelectedZoomLevelProperty">
      <summary>A <see cref="T:System.Windows.DependencyProperty" /> that determines the selected zoom level property of the control.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomControl.SetSelectedZoomLevel(System.Windows.DependencyObject,System.Double)">
      <summary>Sets the SelectedZoomLevelProperty.</summary>
      <param name="control">
        <see cref="T:System.Windows.DependencyProperty" />
      </param>
      <param name="value">The zoom level.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.IWpfTextView.ZoomLevelChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.#ctor(System.Double,System.Windows.Media.Transform)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs" />.</summary>
      <param name="newZoomLevel">The new zoom level for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</param>
      <param name="transform">The zoom transform used for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.NewZoomLevel">
      <summary>Gets the new zoom level for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
      <returns>The new zoom level for an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomLevelChangedEventArgs.ZoomTransform">
      <summary>Gets the zoom transform to apply.</summary>
      <returns>The zoom transform to apply.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter">
      <summary>Allows conversion between string and double representations of the zoom level.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the zoom level from double to string.</summary>
      <returns>The string representation of the zoom level. Returns <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if the conversion fails.</returns>
      <param name="value">The zoom level as <see cref="T:System.Double" /></param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomLevelConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the value from string to double.</summary>
      <returns>The <see cref="T:System.Double" /> value of the zoom level. Returns <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if the conversion fails.</returns>
      <param name="value">The zoom level as <see cref="T:System.String" />.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo">
      <summary>Provides information about an ongoing drag and drop operation. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.#ctor(System.Windows.Point,System.Windows.DragDropKeyStates,System.Windows.IDataObject,System.Boolean,System.Object,System.Windows.DragDropEffects,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" /> with the specified settings.</summary>
      <param name="location">The location of the cursor relative to the left top corner of the text view.</param>
      <param name="keyStates">The state of the keyboard during the operation.</param>
      <param name="data">The <see cref="T:System.Windows.IDataObject" /> of the drag and drop operation.</param>
      <param name="isInternal">true if the drag has been initiated from within the editor, otherwise false.</param>
      <param name="source">The object that initiated the drag and drop operation.</param>
      <param name="allowedEffects">The drag and drop effects allowed by the source.</param>
      <param name="bufferPosition">The buffer position of the cursor during the drag and drop operation.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.AllowedEffects">
      <summary>Gets the drag and drop effects allowed by the source.</summary>
      <returns>The <see cref="T:System.Windows.Forms.DragDropEffects" /> allowed by the source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Data">
      <summary>Gets the <see cref="T:System.Windows.IDataObject" /> of the drag and drop operation.</summary>
      <returns>The <see cref="T:System.Windows.IDataObject" /> of the drag and drop operation</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" /> objects have the same settings.</summary>
      <returns>true if the two objects have the same settings, otherwise false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.GetHashCode">
      <summary>Gets the hash code for this <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" /> object.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.IsInternal">
      <summary>Determines whether the drag and drop operation has been initiated from within the editor.</summary>
      <returns>true if the drag and drop operation has been initiated from within the editor, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.KeyStates">
      <summary>Gets the state of the keyboard during the operation. </summary>
      <returns>The state of the keyboard during the operation.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Location">
      <summary>Gets the location of the cursor relative to the left top corner of the text view.</summary>
      <returns>The location of the cursor relative to the left top corner of the text view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.op_Equality(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" /> objects have the same settings.</summary>
      <returns>true if the two objects have the same settings, otherwise false.</returns>
      <param name="first">The first object.</param>
      <param name="second">The second object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.op_Inequality(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" /> objects have different settings.</summary>
      <returns>true if the two objects have different settings, otherwise false.</returns>
      <param name="first">The first object.</param>
      <param name="second">The second object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.Source">
      <summary>Gets the object that initiated the drag and drop operation.</summary>
      <returns>The object that initiated the drag and drop operation.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo.VirtualBufferPosition">
      <summary>Gets the buffer position of the cursor during the drag and drop operation.</summary>
      <returns>The buffer position of the cursor during the drag and drop operation.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects">
      <summary>Specifies the effects of a drag/drop operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.None">
      <summary>The drag/drop operation is not allowed. The mouse icon will be changed to the "not allowed" icon and no tracker will be shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Copy">
      <summary>The drag/drop operation will result in data copy. The mouse icon will be changed to the copy icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Link">
      <summary>A shortcut or link will be created as the result of the drag/drop operation. The mouse icon will be changed to the shortcut creation icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Move">
      <summary>The data will be moved from the drag source to the drop target. The mouse icon will be changed to the move icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Scroll">
      <summary>The drop operation is causing scrolling in the drop target.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Track">
      <summary>A tracker hinting the drop location on the editor will be displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.All">
      <summary>All possible effects.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute">
      <summary>Specifies the drop format that an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler" /> handles.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute" /> with the specified drop format.</summary>
      <param name="dropFormat">The drop format.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropFormatAttribute.DropFormats">
      <summary>Gets the drop format.</summary>
      <returns>The drop format.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase">
      <summary>Provides the basic functionality necessary to process dragging and dropping data in the editor. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.#ctor(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Operations.IEditorOperations)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase" />.</summary>
      <param name="wpfTextView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> on which this drop handler operates.</param>
      <param name="editorOperations">The <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" /> used to insert text into the editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.DeleteSpans(System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan})">
      <summary>Deletes the specified spans from the buffer.</summary>
      <returns>false if the deletion was canceled otherwise true.</returns>
      <param name="spans">The list of <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> objects.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.EditorOperations">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" /> used to handle tasks such as text insertion.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" /> used to handle tasks such as text insertion.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.ExtractText(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Extracts the text of the specified drag and drop info.</summary>
      <returns>The extracted text.</returns>
      <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.GetDragDropEffect(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Gets the drag and drop effect that should be displayed to the user based on the state of the operation.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects" />.</returns>
      <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Indicates that the drag and drop operation has completed, and that the final tasks, if any, should be performed now.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects" />.</returns>
      <param name="dragDropInfo">Information about the drag and drop operation in progress.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragCanceled">
      <summary>Indicates that a drag and drop operation has been canceled.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDraggingOver(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Indicates that the drag and drop operation is in progress.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects" />.</returns>
      <param name="dragDropInfo">Information about the drag and drop operation in progress.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Indicates the start of a drag and drop operation.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects" />.</returns>
      <param name="dragDropInfo">Information about the drag and drop operation in progress.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.InsertText(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.String)">
      <summary>Inserts textual data at the given position.</summary>
      <returns>false if the operation was canceled, otherwise true.</returns>
      <param name="position">Position at which the data is to be inserted</param>
      <param name="data">Text to be inserted</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.IsDropEnabled(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Determines whether the handler can accept data for a drag and drop operation.</summary>
      <returns>true if either move or copy operations are enabled, otherwise false.</returns>
      <param name="dragDropInfo">Information about the drag and drop operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.MoveText(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITrackingSpan},System.String)">
      <summary>Moves the data from one location to another in the buffer by deleting the selection contents and inserting the specified text at the specified position.</summary>
      <returns>true if the operation was successful, otherwise false.</returns>
      <param name="position">The position at which the data is to be inserted.</param>
      <param name="selectionSpans">A list of tracking spans.</param>
      <param name="data">The text to be inserted</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.PerformPostEditActions(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,System.Boolean)">
      <summary>This method is called after the edits are made to the buffer to perform any necessary post edit actions.</summary>
      <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" /> holding information about the currently ongoing drag/drop operation.</param>
      <param name="successfulEdit">If true, the edits performed on the buffer were successful, if false, the edits failed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.PerformPreEditActions(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>This method is called before edits are made to the buffer to perform any necessary pre edit actions.</summary>
      <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" /> that contains information about the ongoing drag/drop operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.SelectText(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32,Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo,System.Boolean)">
      <summary>Selects the text at the end of the drop operation.</summary>
      <param name="insertionPoint">The position at which data was inserted.</param>
      <param name="dataLength">The length of the data inserted in the buffer.</param>
      <param name="dragDropInfo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo" /> class containing information about the drop.</param>
      <param name="reverse">true if the existing selection prior to the drop was reversed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDrop.DropHandlerBase.TextView">
      <summary>Gets the text view.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler">
      <summary>Handles drag and drop operations for different data formats.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDataDropped(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Indicates that the drag and drop operation has completed, and that the final tasks, if any, should be performed now.</summary>
      <returns>The drag and drop effects of this drop operation. For example, if the drop operation has moved data, <see cref="F:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects.Move" /> should be returned.</returns>
      <param name="dragDropInfo">Information about the drag and drop operation in progress.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragCanceled">
      <summary>Indicates that a drag and drop operation has been canceled.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDraggingOver(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Indicates that the drag and drop operation is in progress.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects" /> for the current operation. For example, this can be used to indicate a copy operation when the CTRL key is down.</returns>
      <param name="dragDropInfo">Information about the drag and drop operation in progress.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.HandleDragStarted(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Indicates the start of a drag and drop operation.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropPointerEffects" /> object for the current operation. For example, this can be used to indicate a copy operation when the CTRL key is down.</returns>
      <param name="dragDropInfo">Information about the drag and drop operation in progress.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler.IsDropEnabled(Microsoft.VisualStudio.Text.Editor.DragDrop.DragDropInfo)">
      <summary>Determines whether the handler can accept data for a drag and drop operation.</summary>
      <returns>true if the handler can accept data now, otherwise false.</returns>
      <param name="dragDropInfo">Information about the drag and drop operation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler" /> for a <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandlerProvider.GetAssociatedDropHandler(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler" /> for a specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDrop.IDropHandler" />.</returns>
      <param name="wpfTextView">The text view for which to get the drop handler.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions">
      <summary>Provides extension methods for options related to an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.AppearanceCategory(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Specifies the appearance category.</summary>
      <returns>The appearance category, which determines where to look up font properties and colors.</returns>
      <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsHighlightCurrentLineEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the option to highlight the current line is enabled.</summary>
      <returns>true if the highlight current line option was enabled, otherwise false.</returns>
      <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsMouseWheelZoomEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether to allow mouse wheel zooming.</summary>
      <returns>true if mouse wheel zooming is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.WpfViewOptionExtensions.IsSimpleGraphicsEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the option to draw a gradient selection is enabled.</summary>
      <returns>true if the draw gradient selection option was enabled, otherwise false.</returns>
      <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLine">
      <summary>Represents a line of formatted text in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.GetOrCreateVisual">
      <summary>Gets the <see cref="T:System.Windows.Media.Visual" /> that can be used to add this formatted text line to a <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.Visual" /> that can be used to add this formatted text line to a <see cref="T:System.Windows.Media.VisualCollection" />.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> has been disposed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.RemoveVisual">
      <summary>Remove the <see cref="T:System.Windows.Media.Visual" /> that represents the rendered text of the line.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetChange(Microsoft.VisualStudio.Text.Formatting.TextViewLineChange)">
      <summary>Sets the Change property for this text line.</summary>
      <param name="change">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetDeltaY(System.Double)">
      <summary>Sets the change in position of the top of this formatted text line between the current view layout and the previous view layout.</summary>
      <param name="deltaY">The change in value for the formatted text line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetLineTransform(Microsoft.VisualStudio.Text.Formatting.LineTransform)">
      <summary>Sets the line transform used to format the text in this formatted text line.</summary>
      <param name="transform">The line transform for this formatted text line.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> has been disposed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetSnapshot(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot)">
      <summary>Sets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> objects upon which this formatted text line is based.</summary>
      <param name="visualSnapshot">The new snapshot for the line in the view model's visual buffer.</param>
      <param name="editSnapshot">The new snapshot for the line in the view model's edit buffer.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> has been disposed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetTop(System.Double)">
      <summary>Sets the position used to format the text in this formatted text line.</summary>
      <param name="top">The position for the top of the formatted text line.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> has been disposed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLine.SetVisibleArea(System.Windows.Rect)">
      <summary>Sets the visible area in which this text line will be formatted.</summary>
      <param name="visibleArea">The bounds of the visible area on the drawing surface upon which this text line will be formatted.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> has been disposed.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource">
      <summary>Generates formatted line from text snapshots.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.BaseIndentation">
      <summary>Gets the base indentation (in logical pixels) for all lines generated by this source.</summary>
      <returns>The base indentation (in logical pixels) for all lines generated by this source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.ColumnWidth">
      <summary>Gets the width of a column in pixels.</summary>
      <returns>The width of a column in pixels.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.DefaultTextProperties">
      <summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> used to render unclassified text.</summary>
      <returns>The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> used to render unclassified text.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.FormatLineInVisualBuffer(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
      <summary>Formats the text and adornments in a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.</summary>
      <returns>The formatted text for that line.</returns>
      <param name="visualLine">The line to format.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.LineHeight">
      <summary>Gets the nominal height of a line.</summary>
      <returns>The nominal height of a line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.MaxAutoIndent">
      <summary>Gets the maximum auto-indent for wrapped lines.</summary>
      <returns>The maximum auto-indent for wrapped lines.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.SourceTextSnapshot">
      <summary>Gets the source text snapshot for which this source will provide formatted text.</summary>
      <returns>The source text snapshot for which this source will provide formatted text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TabSize">
      <summary>Gets the number of spaces between each tab stop.</summary>
      <returns>The number of spaces between each tab stop.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextAndAdornmentSequencer">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" /> used by this source.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" /> used by this source.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextHeightAboveBaseline">
      <summary>Gets the nominal height of the text above the baseline.</summary>
      <returns>The nominal height of the text above the baseline.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TextHeightBelowBaseline">
      <summary>Gets the nominal height of the text below the baseline.</summary>
      <returns>The nominal height of the text below the baseline.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.TopTextSnapshot">
      <summary>Gets the top text snapshot for which this source will provide formatted text.</summary>
      <returns>The top text snapshot for which this source will provide formatted text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.UseDisplayMode">
      <summary>Determines whether the formatter uses <see cref="F:System.Windows.Media.TextFormattingMode.Display" /> for format text.</summary>
      <returns>true if the formatter uses <see cref="F:System.Windows.Media.TextFormattingMode.Display" /> for format text, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource.WordWrapWidth">
      <summary>Gets the width (in logical pixels) where the formatted text will be broken into multiple lines.</summary>
      <returns>The width (in logical pixels) where the formatted text will be broken into multiple lines.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService">
      <summary>Creates formatted text sources.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Classification.IClassifier,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource" /> for the given view configuration.</summary>
      <returns>A new text formatting source for that snapshot.</returns>
      <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
      <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
      <param name="tabSize">The number of spaces between each tab stop.</param>
      <param name="baseIndent">The base indentation for all lines.</param>
      <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
      <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
      <param name="useDisplayMode">Use <see cref="F:System.Windows.Media.TextFormattingMode.Display" /> for formatting text.</param>
      <param name="aggregateClassifier">The aggregate of all classifiers on the view.</param>
      <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
      <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Classification.IClassifier,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap,System.Boolean)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource" /> for the given view configuration.</summary>
      <returns>A new text formatting source for that snapshot.</returns>
      <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
      <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
      <param name="tabSize">The number of spaces between each tab stop.</param>
      <param name="baseIndent">The base indentation for all lines.</param>
      <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
      <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
      <param name="useDisplayMode">Use <see cref="F:System.Windows.Media.TextFormattingMode.Display" /> for formatting text.</param>
      <param name="aggregateClassifier">The aggregate of all classifiers on the view.</param>
      <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
      <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
      <param name="isViewWrapEnabled">Whether word wrap glyphs are enabled for wrapped lines.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IFormattedTextSourceFactoryService.Create(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Double,System.Double,System.Double,System.Boolean,Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer,Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource" /> for the given view configuration.</summary>
      <returns>A new text formatting source for that snapshot.</returns>
      <param name="sourceTextSnapshot">The text snapshot for the source buffer.</param>
      <param name="visualBufferSnapshot">The text snapshot for the visual buffer.</param>
      <param name="tabSize">The number of spaces between each tab stop.</param>
      <param name="baseIndent">The base indentation for all lines.</param>
      <param name="wordWrapWidth">The word wrap width in logical pixels.</param>
      <param name="maxAutoIndent">The maximum amount to auto-indent wrapped lines.</param>
      <param name="useDisplayMode">Use <see cref="F:System.Windows.Media.TextFormattingMode.Display" /> for formatting text.</param>
      <param name="sequencer">The text and adornment sequencer for the view. If null, there are no space negotiating adornments.</param>
      <param name="classificationFormatMap">The classification format map to use while formatting text.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource">
      <summary>Provides the line transform for a line of formatted text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource.GetLineTransform(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
      <summary>Calculates the line transform for a given line of formatted text.</summary>
      <returns>The line transform for that line.</returns>
      <param name="line">The line for which to calculate the line transform.</param>
      <param name="yPosition">The y-coordinate of the line.</param>
      <param name="placement">The placement of the line with respect to <paramref name="yPosition" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider">
      <summary>Provides <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource" /> objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider.Create(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource" /> for the specified text view.</summary>
      <returns>The new <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource" />. The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider" /> decides not to participate.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView" /> on which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource" /> will format.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService">
      <summary>Generates RTF-formatted text from a collection of snapshot spans.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
      <summary>Gets an RTF string containing the formatted text of the snapshot spans.</summary>
      <returns>RTF data.</returns>
      <param name="spans">The collection of snapshot spans.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets an RTF string that contains the formatted text of the spans.</summary>
      <returns>RTF data.</returns>
      <param name="spans">The collection of snapshot spans.</param>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the snapshot spans.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.String)">
      <summary>Gets an RTF string that contains the formatted text of the spans.</summary>
      <returns>RTF data.</returns>
      <param name="spans">The collection of snapshot spans.</param>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the snapshot spans.</param>
      <param name="delimiter">A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> objects in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.String)">
      <summary>Gets an RTF string containing the formatted text of the snapshot spans.</summary>
      <returns>RTF data.</returns>
      <param name="spans">The collection of snapshot spans.</param>
      <param name="delimiter">A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> objects in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextParagraphPropertiesFactoryService">
      <summary>Creates <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> classes to be used when lines on the view are being formatted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextParagraphPropertiesFactoryService.Create(Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource,Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,Microsoft.VisualStudio.Text.IMappingSpan,Microsoft.VisualStudio.Text.IMappingPoint,System.Int32)">
      <summary>Creates a <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> for the provided configuration.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> to be used when the line is being formatted.</returns>
      <param name="formattedLineSource">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLineSource" /> that is performing the formatting of the line. You can access useful properties about the ongoing formatting operation from this object.</param>
      <param name="textProperties">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> of the line for which the <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> are provided. This parameter can be used to obtain formatting information about the textual contents of the line.</param>
      <param name="line">The <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> corresponding to the line that is being formatted or rendered.</param>
      <param name="lineStart">The <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint" /> corresponding to the beginning of the line segment that is being formatted. This parameter is used in word-wrap scenarios where a single <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> results in multiple formatted or rendered lines on the view.</param>
      <param name="lineSegment">The segment number of the line segment that has been currently formatted. This is a zero-based index and is applicable to word-wrapped lines. If a line is word-wrapped into 4 segments, you will receive 4 calls for the line with line segments of 0, 1, 2, and 3.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine">
      <summary>Represents a line of rendered text in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.GetCharacterFormatting(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the formatting for a particular character in the line.</summary>
      <returns>The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> used to format that character.</returns>
      <param name="bufferPosition">The buffer position of the desired character.</param>
      <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.TextLines">
      <summary>Gets a list of text lines that make up the formatted text line.</summary>
      <returns>A read-only collection of text lines.</returns>
      <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> has been disposed.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine.VisibleArea">
      <summary>Gets the visible area in which this text line will be rendered.</summary>
      <returns>The visible area in which this text line will be rendered.</returns>
      <exception cref="T:System.ObjectDisposedException">this <see cref="T:Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine" /> has been disposed.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties">
      <summary>Provides text formatting properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.#ctor(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties" />.</summary>
      <param name="defaultTextRunProperties">The default properties for the paragraph.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="defaultTextRunProperties" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.#ctor(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties,System.Double)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties" />.</summary>
      <param name="defaultTextRunProperties">The default properties for the paragraph.</param>
      <param name="defaultTabSize">The tab size in pixels.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="defaultTextRunProperties" /> or <paramref name="defaultTabSize" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.DefaultIncrementalTab">
      <summary>Gets the default incremental tab.</summary>
      <returns>The default incremental tab.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.DefaultTextRunProperties">
      <summary>Gets the default text run properties.</summary>
      <returns>The default text run properties.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.FirstLineInParagraph">
      <summary>Determines whether this is the first line in a paragraph.</summary>
      <returns>true if this is the first line in a paragraph, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.FlowDirection">
      <summary>Gets the flow direction.</summary>
      <returns>The flow direction.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.Indent">
      <summary>Gets the size of the indent.</summary>
      <returns>The size of the indent.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.LineHeight">
      <summary>Gets the line height.</summary>
      <returns>The line height.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextAlignment">
      <summary>Gets the text alignment.</summary>
      <returns>The text alignment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextMarkerProperties">
      <summary>Gets the text marker properties.</summary>
      <returns>The text marker properties.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingParagraphProperties.TextWrapping">
      <summary>Gets the text wrapping.</summary>
      <returns>The text wrapping.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties">
      <summary>Holds text formatting property information. This class derives from the abstract <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrush">
      <summary>Gets the background brush.</summary>
      <returns>The background brush.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrushEmpty">
      <summary>Determines whether the background brush is empty.</summary>
      <returns>true if the background brush is empty, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrushSame(System.Windows.Media.Brush)">
      <summary>Determines whether the background brush for this <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> is the same as the specified brush.</summary>
      <returns>true if the background brushes are the same, false if they are not.</returns>
      <param name="brush">The other <see cref="T:System.Windows.Media.Brush" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity">
      <summary>Returns the opacity of the background.</summary>
      <returns>The opacity of the background.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacityEmpty">
      <summary>Determines whether any custom opacity is explicitly set for the background.</summary>
      <returns>true if any custom opacity is explicitly set for the background, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold">
      <summary>Determines whether the formatting is made explicitly bold.</summary>
      <returns>true if the formatting is made explicitly bold, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BoldEmpty">
      <summary>Determines whether the bold property is set.</summary>
      <returns>false if the bold property is set, otherwise true.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBackgroundBrush">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same except for the background brush.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundBrush" /> property cleared.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBackgroundOpacity">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity" /> property cleared.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearBold">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold" /> property cleared.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearCultureInfo">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same except for the culture info.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the culture info property cleared.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearFontHintingEmSize">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same except for the font hinting size.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> the font hinting size cleared.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearFontRenderingEmSize">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same except for the rendering size.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the rendering size cleared.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearForegroundBrush">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same except for the foreground brush.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the foreground brush cleared.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearForegroundOpacity">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity" /> property cleared.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearItalic">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic" /> property.</summary>
      <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same, but clears the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic" /> property.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTextDecorations">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same except for the text decorations.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the text decorations property cleared.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTextEffects">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same except for the text effects.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the text effects property cleared.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ClearTypeface">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with all properties the same except for the typeface.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the typeface property cleared.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</summary>
      <returns>The default <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> for the system.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties(System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Media.Typeface,System.Nullable{System.Double},System.Nullable{System.Double},System.Windows.TextDecorationCollection,System.Windows.Media.TextEffectCollection,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the specified options.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> object that has the requested properties.</returns>
      <param name="foreground">The foreground brush of the text.</param>
      <param name="background">The background brush of the text.</param>
      <param name="typeface">The typeface of the text.</param>
      <param name="size">The size of the text.</param>
      <param name="hintingSize">The hinting size of the text.</param>
      <param name="textDecorations">The text decorations on the text.</param>
      <param name="textEffects">The text effects on the text.</param>
      <param name="cultureInfo">The culture info.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CreateTextFormattingRunProperties(System.Windows.Media.Typeface,System.Double,System.Windows.Media.Color)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the specified options.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> that has the requested properties.</returns>
      <param name="typeface">The typeface of the text.</param>
      <param name="size">The size of the text.</param>
      <param name="foreground">The foreground color of the text.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CultureInfo">
      <summary>Gets the culture information.</summary>
      <returns>The culture information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.CultureInfoEmpty">
      <summary>Determines whether the culture info is empty.</summary>
      <returns>true if the culture info is empty, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontHintingEmSize">
      <summary>Gets the font hinting size.</summary>
      <returns>The font hinting size.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontHintingEmSizeEmpty">
      <summary>Determines whether the font hinting size is empty.</summary>
      <returns>true if the font hinting is empty, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontRenderingEmSize">
      <summary>Gets the font rendering size.</summary>
      <returns>The fond rendering size.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.FontRenderingEmSizeEmpty">
      <summary>Determines whether the size is empty.</summary>
      <returns>true if the size is empty, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrush">
      <summary>Gets the foreground brush.</summary>
      <returns>The foreground brush.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrushEmpty">
      <summary>Determines whether the foreground brush is empty.</summary>
      <returns>true if the foreground brush is empty, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundBrushSame(System.Windows.Media.Brush)">
      <summary>Determines whether the foreground brush for this <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> is the same as the specified.</summary>
      <returns>true if the foreground brushes are the same, false if they are not.</returns>
      <param name="brush">The other <see cref="T:System.Windows.Media.Brush" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity">
      <summary>Gets the opacity of the foreground.</summary>
      <returns>The opacity of the foreground.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacityEmpty">
      <summary>Determines whether any custom opacity is explicitly set for the foreground.</summary>
      <returns>true if any custom opacity is explicitly set for the foreground, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> object using a <see cref="T:System.Windows.Markup.XamlWriter" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> used for serialization.</param>
      <param name="context">The serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> object, or creates one if none exists.</summary>
      <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> object, or creates one if none exists.</returns>
      <param name="context">The deserialization context.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic">
      <summary>Determines whether the formatting is made explicitly italic.</summary>
      <returns>true if the formatting is made explicitly italic, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ItalicEmpty">
      <summary>Determines whether the italic property is set.</summary>
      <returns>false if the italic property is set, otherwise true.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SameSize(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
      <summary>Determines whether font sizes for two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> objects are the same.</summary>
      <returns>true if the sizes are the same, false if they are not.</returns>
      <param name="other">The other <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackground(System.Windows.Media.Color)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the background set to the specified color.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="background">The new background color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackgroundBrush(System.Windows.Media.Brush)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the background brush set to the specified brush.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="brush">The new background brush.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="brush" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBackgroundOpacity(System.Double)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.BackgroundOpacity" /> property set to the specified opacity.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="opacity">The background opacity.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="opacity" /> is less than zero or greater than one.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetBold(System.Boolean)">
      <summary>Returns a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Bold" /> property set the specified bold value.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="isBold">true if text formatting is to be bold, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetCultureInfo(System.Globalization.CultureInfo)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the culture set to the specified culture information.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="cultureInfo">The new culture information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetFontHintingEmSize(System.Double)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the font hinting size set to the specified size.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="hintingSize">The new font hinting size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetFontRenderingEmSize(System.Double)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the font rendering size set to the specified size.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="renderingSize">The new rendering size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForeground(System.Windows.Media.Color)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the foreground set to the specified color</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="foreground">The new foreground color.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForegroundBrush(System.Windows.Media.Brush)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the new foreground <see cref="T:System.Windows.Media.Brush" /> set to the specified brush.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="brush">The new foreground brush.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="brush" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetForegroundOpacity(System.Double)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.ForegroundOpacity" /> property set to the specified opacity.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="opacity">The foreground opacity.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="opacity" /> is less than zero or greater than one.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetItalic(System.Boolean)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the <see cref="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Italic" /> property set to the italic value.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="isItalic">true if text formatting is to be italic, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTextDecorations(System.Windows.TextDecorationCollection)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the text decorations set to the specified text decorations.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="textDecorations">The new text decoration collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textDecorations" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTextEffects(System.Windows.Media.TextEffectCollection)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the text effects set to the specified text effects.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="textEffects">The new text effect collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textEffects" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.SetTypeface(System.Windows.Media.Typeface)">
      <summary>Gets a new <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" /> with the properties of this one but with the typeface set to the specified typeface.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties" />.</returns>
      <param name="typeface">The new typeface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeface" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextDecorations">
      <summary>Gets the decorations for the text.</summary>
      <returns>The text decorations.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextDecorationsEmpty">
      <summary>Determines whether the text decorations collection is empty.</summary>
      <returns>true if the text decorations collection is empty, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextEffects">
      <summary>Gets the text effects for the text.</summary>
      <returns>The text effects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TextEffectsEmpty">
      <summary>Determines whether the text effects collection is empty.</summary>
      <returns>true if the text effects collection is empty, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.Typeface">
      <summary>Gets the typeface for the text.</summary>
      <returns>The typeface.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties.TypefaceEmpty">
      <summary>Determines whether the typeface is empty.</summary>
      <returns>true if the typeface is empty, false otherwise.</returns>
    </member>
  </members>
</doc>