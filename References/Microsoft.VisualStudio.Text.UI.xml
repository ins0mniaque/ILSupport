<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Text.UI</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Text.Adornments.ErrorTypeDefinition">
      <summary>Defines error types.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Adornments.ErrorTypeDefinition.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Adornments.ErrorTypeDefinition" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory">
      <summary>Gets a error tagger (a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> of type <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag" />) for the given buffer, or creates a new one if there is no error tagger already cached in the owned properties of the buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory.GetErrorTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Gets the cached error tagger for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />. </summary>
      <returns>The error tagger for the text buffer.</returns>
      <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which to get the error tagger.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory">
      <summary>Gets a text marker tagger (a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> of type <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag" /> for a given buffer, or creates a new one if no text marker tagger is already cached in the owned properties of the buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory.GetTextMarkerTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Gets the cached text marker tagger for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />. </summary>
      <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> for <paramref name="textBuffer" />.</returns>
      <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> with which to get the text marker tagger.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider">
      <summary>Creates and displays tooltips.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ClearToolTip">
      <summary>Removes the tooltip currently being displayed, if any.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ShowToolTip(Microsoft.VisualStudio.Text.ITrackingSpan,System.Object)">
      <summary>Creates and displays a tooltip.</summary>
      <param name="span">The range of text for which the tooltip is relevant.</param>
      <param name="toolTipContent">The content to be displayed in the tooltip. This must be a string or UIElement for the WPF tooltip adornment surface. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider.ShowToolTip(Microsoft.VisualStudio.Text.ITrackingSpan,System.Object,Microsoft.VisualStudio.Text.Adornments.PopupStyles)">
      <summary>Creates and displays a tooltip.</summary>
      <param name="span">The range of text for which the tooltip is relevant.</param>
      <param name="toolTipContent">The content to be displayed in the tooltip. This must be a string or UIElement to be used by the WPF tooltip adornment surface.</param>
      <param name="style">
        <see cref="T:Microsoft.VisualStudio.Text.Adornments.PopupStyles" /> for the tooltip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProviderFactory">
      <summary>Gets an existing tooltip adornment provider from the cached list, or creates one if there is not one in the cache.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipProviderFactory.GetToolTipProvider(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. </summary>
      <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipProvider" /> for <paramref name="textView" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Adornments.PopupStyles">
      <summary>Represents the styles associated with pop-up windows.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.None">
      <summary>Sets the default behavior: the pop-up window has no border, is not resizable, is not dismissed when the mouse moves,</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveText">
      <summary>Dismiss the pop-up window if the mouse leaves the associated text span. This setting is mutually exclusive with <see cref="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveTextOrContent" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveTextOrContent">
      <summary>Dismiss the pop-up window if the mouse leaves the associated text span or the pop-up content. This setting is mutually exclusive with <see cref="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveText" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PositionLeftOrRight">
      <summary>Try to position the pop-up window to the left or right of the visual span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PreferLeftOrTopPosition">
      <summary>Try to position the pop-up window to the left or above the visual span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.RightOrBottomJustify">
      <summary>Align the right or bottom edges of the pop-up window with those of the visual span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PositionClosest">
      <summary>Use the positioning preference specified, but if the opposite positioning can get the popup closer to the visual span, use the opposite positioning.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames">
      <summary>Represents the predefined error types.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.CompilerError">
      <summary>Represents compiler errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.OtherError">
      <summary>Represents other errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.SyntaxError">
      <summary>Represents syntax errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.Warning">
      <summary>Represents compiler warnings.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService">
      <summary>A service that returns an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" /> that aggregates and normalizes all the classifiers for all the text buffers in the buffer graph of a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService.GetClassifier(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" /> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. </summary>
      <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to use in retrieving or creating the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textView" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode.CodeContour">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode.WholeLine">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOption`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOption`1.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOption`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)"></member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.HighlightModeId"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.HighlightModeName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ScrollToFirstDiffId"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ScrollToFirstDiffName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.SynchronizeSideBySideViewsId"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.SynchronizeSideBySideViewsName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ViewModeId"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ViewModeName"></member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.DiffTextViewRole"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.InlineViewTextViewRole"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.LeftViewTextViewRole"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.RightViewTextViewRole"></member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.Inline">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.LeftViewOnly">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.RightViewOnly">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewType"></member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewType.InlineView">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewType.LeftView">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewType.RightView">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ActiveViewType"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.AreViewsSynchronized"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.Close"></member>
    <member name="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.Closed"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.DifferenceBuffer"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.InlineView"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.IsClosed"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.LeftView"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.Options"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.RightView"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToChange(Microsoft.VisualStudio.Text.Differencing.Difference)"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToMatch(Microsoft.VisualStudio.Text.Differencing.Match)"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToNextChange(Microsoft.VisualStudio.Text.SnapshotPoint,System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToNextChange(System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToPreviousChange(Microsoft.VisualStudio.Text.SnapshotPoint,System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToPreviousChange(System.Boolean)"></member>
    <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewMode"></member>
    <member name="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewModeChanged"></member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled">
      <summary>Defines the option to enable auto-scroll.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.Key">
      <summary>Gets the default text view value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.AutoScrollId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.CaretPosition">
      <summary>Represents the position of a caret in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.IMappingPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.</summary>
      <param name="bufferPosition">The index of the caret. The index corresponds to a gap between two characters in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</param>
      <param name="mappingPoint">A mapping point for the caret that can be used to find its position in any buffer.</param>
      <param name="caretAffinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the caret. The caret can have an affinity with the preceding edge of the gap or the following edge of the gap.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.Affinity">
      <summary>Gets the affinity of the caret. </summary>
      <returns>The affinity of the caret.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.BufferPosition">
      <summary>Gets the position of the caret, corresponding to a gap between two characters in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> of the view.</summary>
      <returns>The position of the caret.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> objects are the same</summary>
      <returns>true if the two objects are the same, otherwise false.</returns>
      <param name="obj">The second CaretPosition object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.GetHashCode">
      <summary>Gets the hash code for the <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.op_Equality(Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> objects are the same.</summary>
      <returns>true if the two objects are the same, otherwise false.</returns>
      <param name="caretPosition1">The first CaretPosition object.</param>
      <param name="caretPosition2">The second CaretPosition object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.op_Inequality(Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> objects are different.</summary>
      <returns>true if the two objects are different, otherwise false.</returns>
      <param name="caretPosition1">The first CaretPosition object.</param>
      <param name="caretPosition2">The second CaretPosition object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.Point">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint" /> that marks the position of the caret in the buffer.</summary>
      <returns>The mapping point of the position.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.ToString">
      <summary>Provides a string representation of the caret position.</summary>
      <returns>The string representation of the caret position.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.VirtualBufferPosition">
      <summary>Gets the virtual buffer position as a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" />.</summary>
      <returns>The virtual buffer position.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.VirtualSpaces">
      <summary>Gets the number of spaces past the physical end of the line of the caret position.</summary>
      <returns>The number of virtual spaces past the physical end of the line.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextCaret.PositionChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs" />.</summary>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the caret.</param>
      <param name="oldPosition">The old <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.</param>
      <param name="newPosition">The new <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.NewPosition">
      <summary>Gets the new <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.</summary>
      <returns>The new caret position.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.OldPosition">
      <summary>Gets the old <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.</summary>
      <returns>The old caret position.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.TextView">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the caret.</summary>
      <returns>The text view.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled">
      <summary>Defines the option to enable the change-tracking margin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.Key">
      <summary>Gets the default text view value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ChangeTrackingId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection">
      <summary>Defines the option to cut or copy a blank line if the selection is empty.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.Key">
      <summary>Gets the default text view value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.CutOrCopyBlankLineIfNoSelectionId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions">
      <summary>Represents common <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />-related options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ChangeTrackingId">
      <summary>Determines whether to have the change tracking margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ChangeTrackingName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.GlyphMarginId">
      <summary>Determines whether to have a glyph margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.GlyphMarginName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.HorizontalScrollBarId">
      <summary>Determines whether to have a horizontal scroll bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.HorizontalScrollBarName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.LineNumberMarginId">
      <summary>Determines whether to have a line number margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.LineNumberMarginName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.OutliningMarginId">
      <summary>Determines whether to have an outlining margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.OutliningMarginName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SelectionMarginId">
      <summary>Determines whether to have a selection margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SelectionMarginName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.VerticalScrollBarId">
      <summary>Determines whether to have a vertical scroll bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.VerticalScrollBarName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ZoomControlId">
      <summary>Determines whether to have a zoom control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ZoomControlName"></member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions">
      <summary>Defines common <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.AutoScrollId">
      <summary>Determines whether the view should auto-scroll on text changes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.AutoScrollName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.CutOrCopyBlankLineIfNoSelectionId">
      <summary>Determines whether cut and copy causes a blank line to be cut or copied when the selection is empty.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.CutOrCopyBlankLineIfNoSelectionName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DisplayUrlsAsHyperlinksId">
      <summary>Determines whether URLs should be displayed as hyperlinks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DisplayUrlsAsHyperlinksName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DragDropEditingId">
      <summary>Determines whether drag/drop editing is enabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DragDropEditingName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.IsViewportLeftClippedId">
      <summary>Determines whether the view's ViewportLeft property is clipped to the text width.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.IsViewportLeftClippedName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OutliningUndoOptionId">
      <summary>Determines whether outlining can be undone.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OutliningUndoOptionName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OverwriteModeId">
      <summary>Determines whether overwrite mode is enabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OverwriteModeName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ProduceScreenReaderFriendlyTextId">
      <summary>Whether or not to replace the coding characters and special symbols (such as (,),{,},etc.) with their textual representation for automated objects to produce friendly text for screen readers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ProduceScreenReaderFriendlyTextName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVirtualSpaceId">
      <summary>Determines whether to enable virtual space in the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVirtualSpaceName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVisibleWhitespaceId">
      <summary>Determines whether to show spaces and tabs as visible glyphs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVisibleWhitespaceName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ViewProhibitUserInputId">
      <summary>Determines whether to prohibit user input. The text in the view's buffer can still be modified, and other views on the same buffer may allow user input.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ViewProhibitUserInputName"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.WordWrapStyleId">
      <summary>Gets the word wrap style for the underlying view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.WordWrapStyleName"></member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks">
      <summary>The option definition that determines if URLs should be displayed as hyperlinks.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.Default">
      <summary>Gets the default value (true).</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.Key">
      <summary>Gets the editor option key.</summary>
      <returns>The editor option key.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.DragDropEditing">
      <summary>Defines the view option for drag/drop editing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.DragDropEditing.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.DragDropEditing" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDropEditing.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.DragDropEditing.Key">
      <summary>Gets the default key for the drag/drop editing option.</summary>
      <returns>The default key for the drag/drop editing option.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions">
      <summary>Options to control the behavior of the <see cref="Overload:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.ShowStart">
      <summary>Ensure that the start of the span is visible if it is impossible to display the entire span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.MinimumScroll">
      <summary>Do the minimum amount of scrolling to display the span in the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.AlwaysCenter">
      <summary>Always center the span in the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.None">
      <summary>Ensure that the end of the span is visible if it is impossible to display the entire span. If none of the text in the span is currently visible, center the span in the view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled">
      <summary>Defines the option to enable the glyph margin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.GlyphMarginId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled">
      <summary>Defines the option to enable the horizontal scroll bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.HorizontalScrollBarId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IScrollMap">
      <summary>Defines the mapping between character positions and scrollmap coordinates. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.AreElisionsExpanded">
      <summary>Determines whether the coordinate system used by this scroll map acts as if all elisions are expanded.</summary>
      <returns>true if the elisions are expanded, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.End">
      <summary>Gets the scrollmap coordinate of the end of the buffer.</summary>
      <returns>The scrollmap coordinate of the end of the buffer.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMap.GetBufferPositionAtCoordinate(System.Double)">
      <summary>Gets the buffer position that corresponds to a scrollmap coordinate.</summary>
      <returns>The corresponding buffer position.</returns>
      <param name="coordinate">The scrollbar coordinate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="coordinate" /> is NaN, less than 0.0 or greater than Maximum.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMap.GetCoordinateAtBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the scrollmap coordinates of a buffer position.</summary>
      <returns>The scrollmap coordinates.</returns>
      <param name="bufferPosition">The buffer position.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.Start">
      <summary>Gets the scrollmap coordinate of the start of the buffer.</summary>
      <returns>The scrollmap coordinate of the start of the buffer.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.ThumbSize">
      <summary>Gets the size of the text visible in the view (in scrollmap coordinates).</summary>
      <returns>The size of the text visible in the view.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService">
      <summary>Creates or reuses an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" /> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Creates or reuses an existing scroll map for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" /> for <paramref name="textView" />.</returns>
      <param name="textView">
        <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView,System.Boolean)">
      <summary>Creates or reuses an existing scroll map for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" /> for <paramref name="textView" />.</returns>
      <param name="textView">
        <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" />.</param>
      <param name="areElisionsExpanded">true if the coordinate system used by this scroll map act as if all elisions are expanded, otherwise false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent">
      <summary>Provides methods that compute the desired indentation for a line.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
      <summary>Gets the desired indentation of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.</summary>
      <returns>The number of spaces to place at the start of the line, or null if there is no desired indentation.</returns>
      <param name="line">The line for which to compute the indentation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentationService">
      <summary>Determines automatic indentation when the enter key is pressed or when navigating to an empty line.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndentationService.GetDesiredIndentation(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextSnapshotLine)">
      <summary>Gets the desired indentation of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> as displayed in <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>The desired indentation</returns>
      <param name="textView">The text view in which the line is displayed.</param>
      <param name="line">The line for which to compute the indentation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent" /> object for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider.CreateSmartIndent(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent" /> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> on which the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent" /> will navigate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textView" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped">
      <summary>Defines the option to clip the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeft" /> property to the width of the text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.Key">
      <summary>Gets the default text view value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.IsViewportLeftClippedId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextCaret">
      <summary>Represents the caret associated with an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Bottom">
      <summary>Gets the position of the bottom edge of the caret in the text rendering coordinate system.</summary>
      <returns>The bottom edge position.</returns>
      <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.ContainingTextViewLine">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the caret, provided that that text line is visible in the view.</summary>
      <returns>The containing line.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.EnsureVisible">
      <summary>Makes the caret visible by scrolling the view up or down and left or right until the caret is visible.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Height">
      <summary>Gets the height of the caret in the text rendering coordinate system.</summary>
      <returns>The height of the caret.</returns>
      <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.InVirtualSpace">
      <summary>Determines whether the caret lies in virtual space. A virtual space is one that is after the physical end of a line.</summary>
      <returns>true if the caret is in virtual space, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.IsHidden">
      <summary>Gets or sets the visibility of the caret.</summary>
      <returns>true if the caret is hidden, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Left">
      <summary>Gets the position of the left edge of the caret in the text rendering coordinate system.</summary>
      <returns>The left edge position.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
      <summary>Moves the caret to the specified text line while preserving its current x-coordinate.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret after the move has occurred.</returns>
      <param name="textLine">The text line that will contain the caret.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double)">
      <summary>Moves the caret to the best <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> for the specified x-coordinate and text line.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret after the move has occurred.</returns>
      <param name="textLine">The text line that will contain the caret.</param>
      <param name="xCoordinate">The x-coordinate of the caret in the text rendering coordinate system.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="xCoordinate" /> is NaN.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,System.Boolean)">
      <summary>Moves the caret to the best <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> for the specified x-coordinate and text line.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret after the move has occurred.</returns>
      <param name="textLine">The text line that will contain the caret.</param>
      <param name="xCoordinate">The x-coordinate of the caret in the text rendering coordinate system.</param>
      <param name="captureHorizontalPosition">true if the caret should capture its horizontal position for subsequent moves up or down, false if the caret should retain its previously-captured horizontal position.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="xCoordinate" /> is NaN.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret after the move has occurred.</returns>
      <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the underlying text buffer to which to move the caret.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
      <summary>Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
      <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the underlying text buffer to which to move the caret.</param>
      <param name="caretAffinity">The affinity of the caret. This is ignored unless <paramref name="bufferPosition" /> specifies a location that is at the seam between two word-wrapped lines.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity,System.Boolean)">
      <summary>Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
      <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the underlying text buffer to which to move the caret.</param>
      <param name="caretAffinity">The affinity of the caret. This is ignored unless <paramref name="bufferPosition" /> specifies a location that is at the seam between two word-wrapped lines.</param>
      <param name="captureHorizontalPosition">true if the caret should capture its horizontal position for subsequent moves up or down, false if the caret should retain its previously-captured horizontal position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
      <summary>Moves the caret to the specified buffer position.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
      <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> in the underlying text buffer to which to move the caret.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
      <summary>Moves the caret to the specified buffer position.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
      <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> in the underlying text buffer to which to move the caret.</param>
      <param name="caretAffinity">The affinity of the caret. This is ignored unless <paramref name="bufferPosition" /> specifies a location that is at the seam between two word-wrapped lines.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity,System.Boolean)">
      <summary>Moves the caret to the specified buffer position.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
      <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> in the underlying text buffer to which to move the caret.</param>
      <param name="caretAffinity">The affinity of the caret. This will be ignored unless <paramref name="bufferPosition" /> specifies a location that is at the seam between two word-wrapped lines.</param>
      <param name="captureHorizontalPosition">If true, the caret captures its horizontal position for subsequent moves up or down, if false, the caret retains its previously-captured horizontal position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToNextCaretPosition">
      <summary>Moves the caret to the next valid <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> containing the valid values of the caret after the move has occurred.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToPreferredCoordinates">
      <summary>Moves the caret to the preferred x- and y-coordinates.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToPreviousCaretPosition">
      <summary>Moves the caret to the previous valid <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> containing the valid values of the caret after the move has occurred.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.OverwriteMode">
      <summary>Determines whether the caret is in overwrite mode.</summary>
      <returns>true if the caret is in overwrite mode.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Position">
      <summary>Gets the current position of the caret.</summary>
      <returns>The current position.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextCaret.PositionChanged">
      <summary>Occurs when the position of the caret has been explicitly changed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Right">
      <summary>Gets the position of the right edge of the caret in the text rendering coordinate system.</summary>
      <returns>The right edge position.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Top">
      <summary>Gets the position of the top edge of the caret in the text rendering coordinate system.</summary>
      <returns>The top edge position.</returns>
      <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Width">
      <summary>Gets the width of the caret in the text rendering coordinate system.</summary>
      <returns>The width of the caret.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextSelection">
      <summary>Represents the selected text in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus">
      <summary>Determines whether <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive" /> should track when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> gains and loses aggregate focus. The default is true.</summary>
      <returns>true if the activation tracks the aggregate focus, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivePoint">
      <summary>Gets the active point of the selection.</summary>
      <returns>The active point.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.AnchorPoint">
      <summary>Gets the anchor point of the selection.</summary>
      <returns>The anchor point.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Clear">
      <summary>Makes the selection zero length, with a start and end position at the logical end of the current selection. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.End">
      <summary>Gets the end point of the selection.</summary>
      <returns>The end point.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.GetSelectionOnTextViewLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
      <summary>Get the selection on the specified <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>The selection on <paramref name="line" />.</returns>
      <param name="line">Line for which to get the selection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive">
      <summary>Whether or not the selection is active.</summary>
      <returns>true if the selection is active, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsEmpty">
      <summary>Determines whether the selection is zero length.</summary>
      <returns>true if the selection is zero length, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsReversed">
      <summary>Determines whether the active point is Span.Start and the anchor point is Span.End.</summary>
      <returns>true if the selection is reversed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.Mode">
      <summary>Gets or sets the selection mode.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextSelectionMode" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Select(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
      <summary>Selects the text in the specified selection span.</summary>
      <param name="selectionSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of text to select in the underlying text buffer.</param>
      <param name="isReversed">true if the selection was made in a reverse direction, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Select(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
      <summary>Selects the text between the two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> objects.</summary>
      <param name="anchorPoint">The anchor point of the selection.</param>
      <param name="activePoint">The active point of the selection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.SelectedSpans">
      <summary>The currently-selected spans.</summary>
      <returns>The currently-selected spans.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextSelection.SelectionChanged">
      <summary>Occurs when Select or Clear are called, as well as when the selection is empty and the caret is moved. The sender of the event is this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextSelection" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.Start">
      <summary>Gets the start point of the selection.</summary>
      <returns>The start point.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.StreamSelectionSpan">
      <summary>Gets the current selection as if it were a stream selection, regardless of the current selection mode.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.TextView">
      <summary>Gets the text view to which this selection belongs.</summary>
      <returns>The text view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.VirtualSelectedSpans">
      <summary>The currently-selected spans, as <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> objects.</summary>
      <returns>A collection of currently-selected spans.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextView">
      <summary>Represents a view of text in an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />. It is the base class for a platform-specific interface that has methods to allow the formatted text to be rendered.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.BufferGraph">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" /> that contains the set of source buffers that contribute to this view.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Caret">
      <summary>Gets the caret element.</summary>
      <returns>The caret.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.Close">
      <summary>Closes the text view host and its view.</summary>
      <exception cref="T:System.InvalidOperationException">The text view host is already closed.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.Closed">
      <summary>Occurs immediately after the text view is closed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
      <summary>Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> containing the buffer position is displayed at the desired position.</summary>
      <param name="bufferPosition">The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> displayed at the specified vertical position.</param>
      <param name="verticalDistance">The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the edge of the view. If <paramref name="relativeTo" /> is equal to ViewRelativePosition.Top, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />. Otherwise, it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> to the bottom on the view.Negative values are allowed, which may cause the line to be displayed outside the viewport.This method can become quite expensive if <paramref name="verticalDistance" /> is large. You should avoid making <paramref name="verticalDistance" /> greater than the height of the view.</param>
      <param name="relativeTo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="bufferPosition" /> is from the wrong <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeTo" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> containing the specified buffer position is displayed at the desired position.</summary>
      <param name="bufferPosition">The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> displayed at the specified vertical position.</param>
      <param name="verticalDistance">The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the edge of the view. If <paramref name="relativeTo" /> is equal to ViewRelativePosition.Top, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />. Otherwise, it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> to the bottom on the view.Negative values are allowed, which may cause the line to be displayed outside the viewport.This method can become quite expensive if <paramref name="verticalDistance" /> is large. You should avoid making <paramref name="verticalDistance" /> greater than the height of the view.</param>
      <param name="relativeTo">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition" />.</param>
      <param name="viewportWidthOverride">If specified, the text is formatted as if the viewport had the specified width.</param>
      <param name="viewportHeightOverride">If specified, the text is formatted as if the viewport had the specified height.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="bufferPosition" /> is from the wrong <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeTo" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of text that constitutes a text element (a single visual representation) at the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" />.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> containing the bounds of the text element.</returns>
      <param name="point">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the text snapshot at which to get the text element.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="point" /> is from the wrong <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified text buffer position.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified buffer position.</returns>
      <param name="bufferPosition">The text buffer position used to search for a text line.</param>
      <exception cref="T:System.InvalidOperationException">The view has not completed initialization.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> is not a valid buffer position.</exception>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.GotAggregateFocus">
      <summary>Occurs when the keyboard focus switches to the view or one of its adornments.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.HasAggregateFocus">
      <summary>Determines whether the view or any of its adornments has focus.</summary>
      <returns>true if the view has focus, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.InLayout">
      <summary>Determines whether the view is in the process of being laid out.</summary>
      <returns>true if the view is being laid out, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.IsClosed">
      <summary>Determines whether this text view has been closed.</summary>
      <returns>true if the text view is closed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.IsMouseOverViewOrAdornments">
      <summary>Determines whether the mouse is over the view or any of its adornments.</summary>
      <returns>true if the mouse is over the view, otherwise false.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.LayoutChanged">
      <summary>Occurs when the text editor performs a text line layout.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.LineHeight">
      <summary>Gets the nominal height of a line of text in the view.</summary>
      <returns>The nominal height of a line of text in the view.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.LostAggregateFocus">
      <summary>Occurs when the keyboard focus switches away from the view and any of its adornments.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.MaxTextRightCoordinate">
      <summary>Gets the right coordinate of the longest line, whether or not that line is currently visible, in logical pixels.</summary>
      <returns>The right coordinate.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover">
      <summary>Occurs when the mouse has hovered over a character.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Options">
      <summary>Gets the options for this text view.</summary>
      <returns>The view options.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ProvisionalTextHighlight">
      <summary>Gets the span of text covered by the provisional text highlight.</summary>
      <returns>The highlighted text span.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.QueueSpaceReservationStackRefresh">
      <summary>Requests a refresh of the space reservation stack.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Roles">
      <summary>The roles which this view plays. Roles partially determine the extensions that are instantiated for the view.</summary>
      <returns>The roles which this view plays.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Selection">
      <summary>Gets the selection element.</summary>
      <returns>The selection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> whose text is rendered in this view.</summary>
      <returns>The text buffer.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextDataModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> of this text view.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the text that is currently rendered in the view.</summary>
      <returns>The text snapshot.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines">
      <summary>Gets a read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects rendered in this view.</summary>
      <returns>The collection of text view lines.</returns>
      <exception cref="T:System.InvalidOperationException">The view is in the process of being laid out.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> of this text view.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportBottom">
      <summary>Gets the position of the bottom edge of the viewpoint in the text rendering coordinate system.</summary>
      <returns>The bottom of the viewport.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportHeight">
      <summary>Gets the height of the visible content window (including the margin) in logical pixels.</summary>
      <returns>The height of the viewport.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportHeightChanged">
      <summary>Occurs when the viewport height is changed. Deprecated.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeft">
      <summary>Gets or sets the position of the left edge of the viewpoint in the text rendering coordinate system.</summary>
      <returns>The left edge of the viewport.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeftChanged">
      <summary>Occurs when the position of the viewport left edge is changed. Deprecated</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportRight">
      <summary>Gets the position of the right edge of the viewpoint in the text rendering coordinate system.</summary>
      <returns>The right edge of the viewport.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportTop">
      <summary>Gets the position of the top edge of the viewpoint in the text rendering coordinate system.</summary>
      <returns>The top edge of the viewport.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportWidth">
      <summary>Gets the width of the visible content window (including the margin) in logical pixels.</summary>
      <returns>The width of the viewport.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportWidthChanged">
      <summary>Occurs when the viewport width is changed. Deprecated.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewScroller">
      <summary>Gets a helper that provides various methods to scroll or manipulate the view.</summary>
      <returns>The view scroller.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.VisualSnapshot">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the visual buffer that is being rendered.</summary>
      <returns>The text snapshot.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection">
      <summary>Represents a helper class for accessing the view's collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects. The <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines" /> property is used to get an instance of this interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.ContainsBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Determines whether the specified buffer position is contained by any of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects in the collection.</summary>
      <returns>true if <paramref name="bufferPosition" /> is contained by ones of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects, otherwise false.</returns>
      <param name="bufferPosition">The buffer position.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FirstVisibleLine">
      <summary>Gets the first line that is not completely hidden.</summary>
      <returns>The first line that is not completely hidden.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FormattedSpan">
      <summary>Gets the span of text contained in this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> collection.</summary>
      <returns>The span of text contained in this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the text bounds of the specified text buffer position.</summary>
      <returns>A rectangular <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.</returns>
      <param name="bufferPosition">The text buffer-based index of the character.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetIndexOfTextLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
      <summary>Gets the index in the text lines of the given text view line.</summary>
      <returns>The index of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> in \ view's <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines" /> list.</returns>
      <param name="textLine">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> for which to find the index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textLine" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="textLine" /> has been disposed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures for the text that corresponds to the given span.</summary>
      <returns>A read-only collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures that contain the text specified in <paramref name="bufferSpan" />.</returns>
      <param name="bufferSpan">The buffer span representing the text for which to compute the text bounds.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSpan" /> is not a legal span in the underlying text buffer.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the span whose text element span contains the given buffer position.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that corresponds to the given text element index.</returns>
      <param name="bufferPosition">The buffer position.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified text buffer position.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the position, or null if none exists.</returns>
      <param name="bufferPosition">The text buffer position used to search for a text line.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> is not a valid buffer position.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLineContainingYCoordinate(System.Double)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified y-coordinate.</summary>
      <returns>A text line that contains the y-coordinate, or null if none exists.</returns>
      <param name="y">The y-coordinate in the text rendering coordinate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="y" /> is NaN.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLinesIntersectingSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Gets all of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects that intersect <paramref name="bufferSpan" />.</summary>
      <returns>A sorted collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects that intersect the buffer span.</returns>
      <param name="bufferSpan">The span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.IntersectsBufferSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Determines whether the specified buffer span intersects any of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects in the collection.</summary>
      <returns>true if <paramref name="bufferSpan" /> is contained by ones of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects, otherwise false.</returns>
      <param name="bufferSpan">The buffer span.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.IsValid">
      <summary>Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection" /> object is still valid.</summary>
      <returns>true if this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection" /> object is still valid, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.LastVisibleLine">
      <summary>Gets the last line that is not completely hidden.</summary>
      <returns>The last line that is not completely hidden.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin">
      <summary>Represents the margin that is attached to an edge of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.Enabled">
      <summary>Determines whether the margin is enabled.</summary>
      <returns>true if the margin is enabled, otherwise false.</returns>
      <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.GetTextViewMargin(System.String)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" /> with the specified margin name.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" /> named <paramref name="marginName" />, or null if no match is found.</returns>
      <param name="marginName">The name of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="marginName" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.MarginSize">
      <summary>Gets the size of the margin.</summary>
      <returns>The size of the margin.</returns>
      <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel">
      <summary>Represents a set of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects that take part in the presentation of text in a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer">
      <summary>Represents the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for the data level. </summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for the data level.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataModel">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> that supplies the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer" /> and the governing <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> for the view.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> that supplies the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer" /> and the governing <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> for the view</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> in which editing positions are tracked and to which edits are applied. All the text that appears in the view must reside in this buffer.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> in which editing positions are tracked.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.GetNearestPointInVisualBuffer(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> that corresponds to the specified point in the edit buffer. If the point is hidden or has an alternative representation, gets the nearest point to it.</summary>
      <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> that corresponds to the given point.</returns>
      <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.GetNearestPointInVisualSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)">
      <summary>Gets a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> that corresponds to the specified point in the edit buffer. If the point is hidden or has an alternative representation, gets the nearest point to it.</summary>
      <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> that corresponds to the given point in <paramref name="targetVisualSnapshot" />.</returns>
      <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" />.</param>
      <param name="targetVisualSnapshot">The snapshot of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> to map to.</param>
      <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode" /> to use when translating to <paramref name="targetVisualSnapshot" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.IsPointInVisualBuffer(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
      <summary>Determines whether a point in the edit buffer is represented in the visual buffer.</summary>
      <returns>true if the point is represented in the visual buffer, otherwise false.</returns>
      <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" />.</param>
      <param name="affinity">If the mapping is ambiguous, this parameter affects the mapping as follows: if <paramref name="affinity" /> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor" />, the mapping targets the position immediately after the preceding character in the projection buffer if <paramref name="affinity" /> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor" />, the mapping targets the position immediately before the following character in the projection buffer. This parameter has no effect if the mapping is unambiguous.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> whose contents should be presented in the editor.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> whose contents should be presented in the editor.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider">
      <summary>Provides <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider.CreateTextViewModel(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> created for <paramref name="dataModel" />, or null if the text view model cannot be created.</returns>
      <param name="dataModel">The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" />.</param>
      <param name="roles">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet" /> for the view that is about to be created.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet">
      <summary>Set of text view roles.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.Contains(System.String)">
      <summary>Determines whether the given text view role is a member of the set.</summary>
      <returns>true if the given text view role is a member of the set, otherwise false.</returns>
      <param name="textViewRole">The role.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textViewRole" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.ContainsAll(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Determines whether the set contains all of the given text view roles.</summary>
      <returns>true if the set contains all of the given text view roles, otherwise false.</returns>
      <param name="textViewRoles">The list of roles to check for inclusion.</param>
      <exception cref="T:System.ArgumentNullException">if <paramref name="textViewRoles" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.ContainsAny(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Determines whether the set contains at least one of the given text view roles.</summary>
      <returns>true if the set contains at least one of the given text view roles, otherwise false.</returns>
      <param name="textViewRoles">The list of roles to check for inclusion.</param>
      <exception cref="T:System.ArgumentNullException">if <paramref name="textViewRoles" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.UnionWith(Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
      <summary>Gets the union of the set and another text view role set.</summary>
      <returns>The union of the set and another text view role set.</returns>
      <param name="roleSet">The second text view role set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="roleSet" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap">
      <summary>Maps between character positions and fractions of the total vertical extent of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.GetBufferPositionAtFraction(System.Double)">
      <summary>Gets the buffer position that corresponds to a fraction of the vertical extent of the view, if it exists.</summary>
      <returns>The corresponding character position.</returns>
      <param name="fraction">The fraction of the vertical extent of the view.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fraction" /> is NaN, less than 0.0 or greater than 1.0.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.GetFractionAtBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the fraction of the vertical extent of the view that corresponds to the specified buffer position.</summary>
      <returns>The corresponding fraction of the vertical extent of the view.</returns>
      <param name="bufferPosition">The buffer position.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.MappingChanged">
      <summary>Occurs when the mapping has changed between a character position and its vertical fraction. For example, the view may have re-rendered some lines, changing their font size.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.TextView">
      <summary>Gets the text view to which this fraction map applies.</summary>
      <returns>The text view to which this fraction map applies.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar">
      <summary>Represents a vertical scroll bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetBufferPositionOfYCoordinate(System.Double)">
      <summary>Gets the buffer position that corresponds to a y-coordinate in the scrollbar track.</summary>
      <returns>A position in the buffer, even if <paramref name="y" /> is below or above the mapped range of coordinates.</returns>
      <param name="y">Desired y-coordinate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetYCoordinateOfBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the y-coordinate in the scrollbar track that corresponds to a buffer position.</summary>
      <returns>The corresponding y-coordinate of the buffer position.</returns>
      <param name="bufferPosition">Desired position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetYCoordinateOfScrollMapPosition(System.Double)">
      <summary>Gets the y-coordinate in the scrollbar track that corresponds to a position in scroll map coordinates.</summary>
      <returns>The corresponding y-coordinate.</returns>
      <param name="scrollMapPosition">The desired position.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.Map">
      <summary>Gets the mapping between the text position and the scrollbar coordinate for the scrollbar.</summary>
      <returns>The mapping between the text position and the scrollbar coordinate for the scrollbar.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.ThumbHeight">
      <summary>Gets the height of the scrollbar thumb in pixels.</summary>
      <returns>The height of the scrollbar thumb in pixels</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanBottom">
      <summary>Gets the y-coordinate of the bottom of the scrollbar track as it is rendered in the display (excluding the scroll buttons at the top and bottom).</summary>
      <returns>The y-coordinate of the bottom of the scrollbar track as it is rendered in the display (excluding the scroll buttons at the top and bottom).</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanChanged">
      <summary>Occurs when the span of the scrollbar track dimensions is changed. For example, they could change as a result of resizing the view.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanHeight">
      <summary>Gets the height of the scrollbar track as it is rendered in the display (excluding the scroll buttons at the top and bottom).</summary>
      <returns>The height of the scrollbar track as it is rendered in the display (excluding the scroll buttons at the top and bottom).</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanTop">
      <summary>Gets the y-coordinate of the top of the scrollbar track as it is rendered in the display (excluding the scroll buttons at the top and bottom).</summary>
      <returns>The y-coordinate of the top of the scrollbar track as it is rendered in the display (excluding the scroll buttons at the top and bottom).</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.IViewScroller">
      <summary>Represents a helper class for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, and provides basic functionality for scrolling. The <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewScroller" /> property of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is used to get an instance of the this interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Ensures that all the text in the specified span is entirely visible in the view.</summary>
      <param name="span">The span to make visible.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
      <summary>Ensures that all the text in the specified span is entirely visible in the view.</summary>
      <param name="span">The span to make visible.</param>
      <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
      <summary>Ensures that all the text in the specified span is entirely visible in the view.</summary>
      <param name="span">The span to make visible.</param>
      <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportHorizontallyByPixels(System.Double)">
      <summary>Scrolls the viewport horizontally by the specified distance.</summary>
      <param name="distanceToScroll">The distance to scroll the viewport in the text rendering coordinate system. Positive values scroll the viewport to the right, and negative values scroll the viewport to the left.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="distanceToScroll" /> is NaN.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByLine(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
      <summary>Scrolls the viewport vertically one line up or down.</summary>
      <param name="direction">The direction in which to scroll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByLines(Microsoft.VisualStudio.Text.Editor.ScrollDirection,System.Int32)">
      <summary>Scrolls the viewport vertically by multiple lines up or down.</summary>
      <param name="direction">The direction in which to scroll.</param>
      <param name="count">The number of lines to scroll up or down.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection" />, or <paramref name="count" /> is negative.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByPage(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
      <summary>Scrolls the viewport vertically one page up or down.</summary>
      <returns>true if the view contains one or more fully visible lines prior to scrolling, otherwise false.</returns>
      <param name="direction">The direction in which to scroll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection" />.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByPixels(System.Double)">
      <summary>Scrolls the viewport vertically by the specified distance.</summary>
      <param name="distanceToScroll">The distance to scroll in the text rendering coordinate system. Positive values scroll the viewport up, and negative values scroll the viewport down.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="distanceToScroll" /> is NaN.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled">
      <summary>Defines the option to enable the line number margin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>The default text view host value.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute">
      <summary>Specifies the type of margin container.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute.#ctor(System.String)">
      <summary>Instantiates a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute" />.</summary>
      <param name="marginContainer">The name of the container for this margin.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="marginContainer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="marginContainer" /> is an empty string.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute.MarginContainer">
      <summary>Gets the name of the margin container.</summary>
      <returns>The name of the margin container.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute">
      <summary>An attribute to be placed on an event handler for <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover" />, specifying the delay between the time when the mouse stops moving and the generation of the hover event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute" />.</summary>
      <param name="delay">The time in milliseconds between the time when the mouse stops moving and the generation of the hover event.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute.Delay">
      <summary>Gets the time in milliseconds between the time when the mouse stops moving and the generation of the hover event.</summary>
      <returns>The time in milliseconds between the time when the mouse stops moving and the generation of the hover event.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.Int32,Microsoft.VisualStudio.Text.IMappingPoint)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs" />.</summary>
      <param name="view">The view in which the hover event is being generated.</param>
      <param name="position">The position of the character under the mouse in the snapshot span of the view.</param>
      <param name="textPosition">The position mapped to the buffer graph of the character under the mouse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is negative or greater than the length of the view's buffer.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.Position">
      <summary>Gets the position in the snapshot span of the character under the mouse at the time of the hover.</summary>
      <returns>The position in the snapshot span of the character under the mouse at the time of the hover.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.TextPosition">
      <summary>Gets the position mapped to the buffer graph of the character under the mouse at the time of the hover.</summary>
      <returns>The position mapped to the buffer graph of the character under the mouse at the time of the hover.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.View">
      <summary>Gets the view for which the hover event is being generated.</summary>
      <returns>The view for which the hover event is being generated.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled">
      <summary>Defines the option to enable the outlining margin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.OutliningMarginId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled">
      <summary>The option definition that determines whether outlining is undoable.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.Default">
      <summary>Gets the default value (true).</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.Key">
      <summary>Gets the editor option key.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OutliningUndoOptionId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OverwriteMode">
      <summary>Defines the view option for overwrite mode.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OverwriteMode.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.OverwriteMode" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OverwriteMode.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.OverwriteMode.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OverwriteModeId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames">
      <summary>Includes the predefined margin names.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Bottom">
      <summary>The margin below the text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.BottomControl">
      <summary>A horizontal margin container in the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Bottom" /> margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBarContainer" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.BottomRightCorner"></member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Glyph">
      <summary>The margin to the left of the text view that shows breakpoint and other glyphs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar">
      <summary>The standard horizontal scrollbar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBarContainer">
      <summary>The container margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar" /> by default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Left">
      <summary>The margin to the left of the text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LeftSelection">
      <summary>The margin to the left of the text view that implements mouse handlers for line selection. This behavior is inherited by margins contained in the left selection margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LineNumber">
      <summary>The margin to the left of the text view that shows line numbers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Outlining">
      <summary>The margin to the left of the text view that allows collapsing and expansion of outlining regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Right">
      <summary>The margin to the right of the text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.RightControl">
      <summary>A vertical margin container in the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Right" /> margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBarContainer" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Spacer">
      <summary>The margin that appears between the line number and outlining margins and shows which text has changed in the current session.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Top">
      <summary>The margin above the text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar">
      <summary>The standard vertical scrollbar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBarContainer">
      <summary>The container margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar" /> by default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.ZoomControl">
      <summary>The margin to the left of the horizontal scroll bar that hosts a zoom control for the view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles">
      <summary>The set of the names of predefined text view roles.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Analyzable">
      <summary>Applies to text views of entities that can be analyzed for errors or other information (such as "quick info").</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Debuggable">
      <summary>Applies to text views of entities in which the debugger can display information at runtime.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Document">
      <summary>Applies to text views of entities, typically stored in files, that have a definite first line and last line. This excludes entities such as output logs or textual displays of data that are presented in a form.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Editable">
      <summary>Applies to text views that can be changed using the keyboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Interactive">
      <summary>Applies to text views with which the user can interact using the mouse and/or keyboard. Views that are not interactive cannot display a caret or a selection and cannot have keyboard input.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.PrimaryDocument">
      <summary>Applies to text views of documents that are open for mainline editing, excluding auxiliary views of documents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured">
      <summary>Applies to text views of entities that have internal structure that should be exposed by editor facilities such as Outlining.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Zoomable">
      <summary>Applies to text views of entities that allow the user to perform zooming operations.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText">
      <summary>Defines the option to enable providing annotated text in automation controls so that screen readers can properly read contents of code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ProduceScreenReaderFriendlyTextId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute"></member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute.#ctor(System.String)"></member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute.Replaces"></member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection">
      <summary>The direction in which to scroll the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ScrollDirection.Up">
      <summary>Scroll up.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ScrollDirection.Down">
      <summary>Scroll down.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled">
      <summary>Defines the option to enable the selection margin.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SelectionMarginId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.TextSelectionMode">
      <summary>Represents the different selection modes (simple and box).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.TextSelectionMode.Stream">
      <summary>A simple selection (only one span)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.TextSelectionMode.Box">
      <summary>A box selection (from a start line and column to an end line and column).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.TextViewCreated" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs" /> for the specified text view.</summary>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs.TextView">
      <summary>The newly created <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>The text view.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextView.LayoutChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ViewState,Microsoft.VisualStudio.Text.Editor.ViewState,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.ITextViewLine},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.ITextViewLine})">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs" />.</summary>
      <param name="oldState">State of the view prior to the layout.</param>
      <param name="newState">State of the view after the layout.</param>
      <param name="newOrReformattedLines">A list of the new or reformatted <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />  objects.</param>
      <param name="translatedLines">A list of the translated <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />  objects.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.HorizontalTranslation">
      <summary>Determines whether the view was translated horizontally after the last layout.</summary>
      <returns>true if the view was translated horizontally after the last layout, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewOrReformattedLines">
      <summary>Gets a read-only collection of new or reformatted lines.</summary>
      <returns>A read-only collection of new or reformatted lines.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewOrReformattedSpans">
      <summary>Gets a collection of new or reformatted spans.</summary>
      <returns>A collection of new or reformatted spans.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewSnapshot">
      <summary>Gets the new snapshot of the view.</summary>
      <returns>The new snapshot of the view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewViewState">
      <summary>Gets the state of the view after the layout.</summary>
      <returns>The state of the view after the layout.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.OldSnapshot">
      <summary>Gets the old snapshot of the view. Deprecated.</summary>
      <returns>The old snapshot of the view.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.OldViewState">
      <summary>Gets the state of the view prior to the layout.</summary>
      <returns>The state of the view prior to the layout.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.TranslatedLines">
      <summary>Gets a collection of translated lines.</summary>
      <returns>A collection of translated lines.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.TranslatedSpans">
      <summary>Gets a collection of translated spans.</summary>
      <returns>A collection of translated spans.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldState" /> or <paramref name="newState" /> or <paramref name="translatedLines" /> or <paramref name="newOrReformattedLines" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.VerticalTranslation">
      <summary>Determines whether the view was translated vertically after the last layout.</summary>
      <returns>true if the view was translated vertically after the last layout, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute">
      <summary>Use this attribute to specify the kinds of TextViews to which an extension applies.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute.#ctor(System.String)">
      <summary>Construct a new instance of the attribute.</summary>
      <param name="role">The case-insensitive name of the role.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="role" /> is null or empty.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute.TextViewRoles">
      <summary>Gets the role name.</summary>
      <returns>The role name.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace">
      <summary>Defines the option to use virtual space.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.Key">
      <summary>Gets the key of this option.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVirtualSpaceId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace">
      <summary>Defines the option to use visible whitespace.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>The default text view host value..</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled">
      <summary>Defines the option to enable the vertical scroll bar.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.VerticalScrollBarId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1">
      <summary>Defines a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />-specific editor option.</summary>
      <typeparam name="T">The type of the option.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
      <summary>Determines whether the option is applicable to the specified scope.</summary>
      <returns>true if the option is applicable to the specified scope, otherwise false.</returns>
      <param name="scope">The scope.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput">
      <summary>Defines the Prohibit User Input option.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.Default">
      <summary>Gets the default value, which is false.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ViewProhibitUserInputId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition">
      <summary>Defines the meaning of the <paramref name="verticalOffset" /> parameter in the <see cref="Overload:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition" /> method and the <paramref name="relativeTo" /> parameter in the <see cref="Overload:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition.Top">
      <summary>The offset with respect to the top of the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition.Bottom">
      <summary>The offset with respect to the bottom of the view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ViewState">
      <summary>Represents the state of a view in terms of the size of its viewport (the area visible in the document window), visual snapshot, and editable snapshot.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ViewState.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewState" /> for the specified text view</summary>
      <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ViewState.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewState" /> for the specified view, viewport width, and viewport height.</summary>
      <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
      <param name="effectiveViewportWidth">The width of the viewport.</param>
      <param name="effectiveViewportHeight">The height of the viewport.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.EditSnapshot">
      <summary>Gets the view's edit snapshot.</summary>
      <returns>The view's edit snapshot.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportBottom">
      <summary>Gets the y-coordinate of the viewport's bottom edge.</summary>
      <returns>The y-coordinate of the viewport's bottom edge.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportHeight">
      <summary>Gets the height of the viewport.</summary>
      <returns>The height of the viewport.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportLeft">
      <summary>Gets the x-coordinate of the viewport's left edge.</summary>
      <returns>The x-coordinate of the viewport's left edge.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportRight">
      <summary>Gets the x-coordinate of the viewport's right edge.</summary>
      <returns>The x-coordinate of the viewport's right edge.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportTop">
      <summary>Gets the y-coordinate of the viewport's top edge.</summary>
      <returns>The y-coordinate of the viewport's top edge.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportWidth">
      <summary>Gets the width of the viewport.</summary>
      <returns>The width of the viewport.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.VisualSnapshot">
      <summary>Gets the view's visual snapshot.</summary>
      <returns>The view's visual snapshot.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyle">
      <summary>Defines the word wrap style option.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyle" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.Default">
      <summary>Gets the default value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.None" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.WordWrapStyleId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles">
      <summary>Sets a bitwise combination of enumeration values to specify the word wrap style of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.None">
      <summary>Word wrap is disabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.WordWrap">
      <summary>Word wrap is enabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.VisibleGlyphs">
      <summary>If word wrap is enabled, use visible glyphs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.AutoIndent">
      <summary>If word wrap is enabled, use auto-indent.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomConstants">
      <summary>Defines the constants used for zoom operations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.DefaultZoom">
      <summary>The default zoom level on the text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.MaxZoom">
      <summary>The maximum zoom allowed on the text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.MinZoom">
      <summary>The minimum zoom allowed on the text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.ScalingFactor">
      <summary>The scaling factor used for zooming in and out of the view. The view zooms by a factor of 10%.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled">
      <summary>Defines the option to enable the zoom control.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.Default">
      <summary>Gets the default value, which is true.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.Key">
      <summary>Gets the default text view host value.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ZoomControlId" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions">
      <summary>Provides extension methods for options related to the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsChangeTrackingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether change tracking is enabled with the specified set of editor options.</summary>
      <returns>true if change tracking is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsGlyphMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the glyph margin is enabled with the specified set of editor options.</summary>
      <returns>true if the glyph margin is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsHorizontalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the horizontal scrollbar is enabled with the specified set of editor options.</summary>
      <returns>true if the horizontal scrollbar is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsLineNumberMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the line number margin is enabled with the specified set of editor options.</summary>
      <returns>true if the line number margin is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsOutliningMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the outlining margin is enabled with the specified set of editor options.</summary>
      <returns>true if the Outlining margin is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsSelectionMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the selection margin is enabled with the specified set of editor options.</summary>
      <returns>true if the selection margin is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsVerticalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the vertical scrollbar is enabled with the specified set of editor options.</summary>
      <returns>true if the vertical scrollbar is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsZoomControlEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the zoom control is enabled with the specified set of editor options.</summary>
      <returns>true if the zoom control is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions">
      <summary>Provides methods for <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />-related options.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.DoesViewProhibitUserInput(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the view prohibits all user input.</summary>
      <returns>true if all user input to the view is prohibited, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsAutoScrollEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether auto-scroll is enabled with the specified set of editor options.</summary>
      <returns>true if auto-scroll is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsDragDropEditingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the option for drag/drop editing is enabled in the specified options.</summary>
      <returns>true if the drag/drop editing option is enabled, false otherwise.</returns>
      <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> used to look up the option value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsOutliningUndoEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the option for outlining undo enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</summary>
      <returns>true if the option is enabled, otherwise false.</returns>
      <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsOverwriteModeEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether overwrite mode is enabled with the specified set of editor options.</summary>
      <returns>true if overwrite mode is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsViewportLeftClipped(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether the view's ViewportLeft property is clipped to the text width.</summary>
      <returns>true if the ViewportLeft property is clipped, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsVirtualSpaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether virtual space is enabled for the specified set of editor options.</summary>
      <returns>true if virtual space is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsVisibleWhitespaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Determines whether visible whitespace is enabled with the specified set of editor options.</summary>
      <returns>true if visible whitespace is enabled, otherwise false.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.WordWrapStyle(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
      <summary>Gets the set of word wrap styles with the specified set of editor options.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles" /> of the set of editor options.</returns>
      <param name="options">The set of editor options.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement">
      <summary>Represents a sequence element that consists of an adornment.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Affinity">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the adornment.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Baseline">
      <summary>Gets the distance (in logical pixel)s between the top of the adornment text and the baseline of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>The distance (in logical pixel)s between the top of the adornment text and the baseline of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.BottomSpace">
      <summary>Gets the amount of space (in logical pixels) to reserve below the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>The amount of space (in logical pixels) to reserve below the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.IdentityTag">
      <summary>Gets the unique identifier associated with this adornment.</summary>
      <returns>The unique identifier associated with this adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.ProviderTag">
      <summary>Gets the unique identifier associated with the provider of the adornment.</summary>
      <returns>The unique identifier associated with the provider of the adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TextHeight">
      <summary>Gets the height of the adornment text.</summary>
      <returns>The height of the adornment text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TopSpace">
      <summary>Gets the amount of space (in logical pixels) to reserve above top of the text for the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>The amount of space (in logical pixels) to reserve above top of the text for the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Width">
      <summary>Gets the width of the adornment (in logical pixels).</summary>
      <returns>The width of the adornment (in logical pixels).</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement">
      <summary>Represents the basic element in a sequence of elements that compose an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ISequenceElement.ShouldRenderText">
      <summary>Determines whether the text in the span should be rendered in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>true if the text in the span should be rendered in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ISequenceElement.Span">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> of the element.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> of the element.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection">
      <summary>Represents a list of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement" /> objects generated by the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection.Sequencer">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" /> that generated the collection.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" /> that generated the collection.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer">
      <summary>Creates a sequence of text and adornment elements to compose an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.BufferGraph">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" /> used by the sequencer.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" /> used by the sequencer.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.ITextSnapshot)">
      <summary>Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.</summary>
      <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement" /> objects that contain the text and adornment elements.</returns>
      <param name="topLine">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> to sequence.</param>
      <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer" /> that corresponds to <paramref name="topLine" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.ITextSnapshot)">
      <summary>Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.</summary>
      <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement" /> objects that contain the text and adornment elements.</returns>
      <param name="topSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> in the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer" /> to sequence.</param>
      <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer" /> that corresponds to <paramref name="topSpan" />.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SequenceChanged">
      <summary>Occurs when there has been a change in the data used by the sequencer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer">
      <summary>Gets the source buffer of the buffer graph.</summary>
      <returns>The source buffer of the buffer graph.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer">
      <summary>Gets the top <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> in the buffer graph.</summary>
      <returns>The top <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> in the buffer graph.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService">
      <summary>Service to create an instance of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" />.</returns>
      <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine">
      <summary>Represents text that has been formatted for display in a text view.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Baseline">
      <summary>Gets the distance from the top of the text to the baseline text on the line.</summary>
      <returns>The distance from the top of the text to the baseline text on the line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Bottom">
      <summary>Gets the position of the bottom edge of this line in the text rendering coordinate system.</summary>
      <returns>The position of the bottom edge of this line in the text rendering coordinate system.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Change">
      <summary>Gets the change to this rendered textline between the current layout and the previous layout.</summary>
      <returns>The change to this rendered textline between the current layout and the previous layout.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ContainsBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Determines whether the specified buffer position lies within this text line.</summary>
      <returns>true if <paramref name="bufferPosition" /> lies within this text line, otherwise false.</returns>
      <param name="bufferPosition">The buffer position.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.DefaultLineTransform">
      <summary>Gets the default <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform" /> used to render this line.</summary>
      <returns>The default <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform" /> used to render this line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.DeltaY">
      <summary>Gets the change in the top of this rendered text line between he value of <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top" /> in the current layout and the value of <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top" /> in the previous layout.</summary>
      <returns>The change in the top of this rendered text line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.End">
      <summary>Gets the position of the first character past the end of the line, excluding any line break characters. </summary>
      <returns>The position of the first character past the end of the line, excluding any line break characters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndIncludingLineBreak">
      <summary>Gets the position of the first character past the end of the line, including any line break characters. </summary>
      <returns>The position of the first character past the end of the line, including any line break characters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndOfLineWidth">
      <summary>Gets the distance from the right edge of the last character in this line to the end of the space of this line. </summary>
      <returns>The distance from the right edge of the last character in this line to the end of the space of this line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent">
      <summary>Gets the extent of the line, excluding any line break characters.</summary>
      <returns>The extent of the line, excluding any line break characters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentAsMappingSpan">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> that corresponds to the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent" /> of the line.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> that corresponds to the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent" /> of the line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak">
      <summary>Gets the extent of the line, including any line break characters.</summary>
      <returns>The extent of the line, including any line break characters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreakAsMappingSpan">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> that corresponds to <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> that corresponds to <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentBounds(System.Object)">
      <summary>Calculates the bounds of the specified adornment.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure if this line contains an adornment with the specified <paramref name="identityTag" />, otherwise null.</returns>
      <param name="identityTag">The IAdornmentElement.IdentityTag of the adornment whose bounds should be calculated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)">
      <summary>Gets the adornments positioned on the line.</summary>
      <returns>A sequence of adornment identity tags in order of their appearance on the line. The collection is always non-null but may be empty.</returns>
      <param name="providerTag">The identity tag of the provider. This tag should match SpaceNegotiatingAdornmentTag.ProviderTag.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTag" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetBufferPositionFromXCoordinate(System.Double)">
      <summary>Gets the buffer position of the character whose character bounds contains the given x-coordinate.</summary>
      <returns>The text buffer-based point of the character at <paramref name="xCoordinate" />, or null if there is no character at that position.</returns>
      <param name="xCoordinate">The x-coordinate of the desired character.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetBufferPositionFromXCoordinate(System.Double,System.Boolean)">
      <summary>Gets the buffer position of the character whose character bounds contains the given x-coordinate.</summary>
      <returns>The text buffer-based point of the character at <paramref name="xCoordinate" />, or null if there is no character at that position.</returns>
      <param name="xCoordinate">The x-coordinate of the desired character.</param>
      <param name="textOnly">If true, then this method will return null if <paramref name="xCoordinate" /> is over an adornment.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Calculates the bounds of the character at the specified buffer position.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.</returns>
      <param name="bufferPosition">The text buffer-based index of the character.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetCharacterBounds(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
      <summary>Calculates the bounds of the character at the specified buffer position.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.</returns>
      <param name="bufferPosition">The text buffer-based index of the character.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetExtendedCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Calculates the bounds of the character at the specified buffer position, including any adjacent space-negotiating adornments.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.</returns>
      <param name="bufferPosition">The text buffer-based index of the character.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetExtendedCharacterBounds(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
      <summary>Calculates the bounds of the character at the specified virtual buffer position, including any adjacent space-negotiating adornments.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.</returns>
      <param name="bufferPosition">The text buffer-based index of the character.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetInsertionBufferPositionFromXCoordinate(System.Double)">
      <summary>Gets the buffer position used if new data were to be inserted at the given x-coordinate.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" />.</returns>
      <param name="xCoordinate">The x-coordinate of the desired point.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures for the text that corresponds to the given span.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures that contain the text specified in <paramref name="bufferSpan" />.</returns>
      <param name="bufferSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> representing the text for which to compute the text bounds.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSpan" /> is not a legal span in the underlying text buffer.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
      <summary>Gets the span whose text element index corresponds to the given buffer position.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that corresponds to the given text element.</returns>
      <param name="bufferPosition">The buffer position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetVirtualBufferPositionFromXCoordinate(System.Double)">
      <summary>Gets the buffer position of the character whose character bounds contains the given x-coordinate.</summary>
      <returns>The text buffer-based point of the character at <paramref name="xCoordinate" />.</returns>
      <param name="xCoordinate">The x-coordinate of the desired character.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Height">
      <summary>Gets the distance between the top and bottom edge of this line.</summary>
      <returns>The distance between the top and bottom edge of this line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IdentityTag">
      <summary>Gets a tag that can be used to track the identity of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> across layouts in the view.</summary>
      <returns>A tag that can be used to track the identity of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> across layouts in the view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IntersectsBufferSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Determines whether a <paramref name="bufferSpan" /> intersects this text line.</summary>
      <returns>true if <paramref name="bufferSpan" /> intersects the text line, otherwise false.</returns>
      <param name="bufferSpan">The buffer span.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsFirstTextViewLineForSnapshotLine">
      <summary>Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> is the first line in the list of lines formatted for a particular <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.</summary>
      <returns>true if this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> is the first line in the list of lines formatted for a particular <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsLastTextViewLineForSnapshotLine">
      <summary>Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> is the last line in the list of lines formatted for a particular <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.</summary>
      <returns>true if this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> is the last line in the list of lines formatted for a particular <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsValid">
      <summary>Determines whether this text view line is still valid.</summary>
      <returns>true if this text view line is still valid, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Left">
      <summary>Gets the position of the left edge of this line in the text rendering coordinate system.</summary>
      <returns>The position of the left edge of this line in the text rendering coordinate system.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Length">
      <summary>Gets the length of the line, excluding any line break characters.</summary>
      <returns>The length of the line, excluding any line break characters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LengthIncludingLineBreak">
      <summary>Gets the length of the line, including any line break characters.</summary>
      <returns>The length of the line, including any line break characters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineBreakLength">
      <summary>Gets the length of the line break sequence (for example, "\r\n") that appears at the end of this line.</summary>
      <returns>A integer in the range [0..2].</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform">
      <summary>Gets the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform" /> used to render this line.</summary>
      <returns>The <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform" /> used to render this line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Right">
      <summary>Gets the position of the right edge of this line in the text rendering coordinate system.</summary>
      <returns>The position of the right edge of this line in the text rendering coordinate system.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> on which this map is based.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> on which this map is based.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Start">
      <summary>Gets the position in <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot" /> of the first character in the line.</summary>
      <returns>The position in <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot" /> of the first character in the line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextBottom">
      <summary>Gets the y-coordinate of the bottom of the text in the rendered line.</summary>
      <returns>The y-coordinate of the bottom of the text in the rendered line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextHeight">
      <summary>Gets the vertical distance between the top and bottom of the text in the rendered line.</summary>
      <returns>The vertical distance between the top and bottom of the text in the rendered line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft">
      <summary>Gets the x-coordinate of the left edge of the text in the rendered line.</summary>
      <returns>The x-coordinate of the left edge of the text in the rendered line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight">
      <summary>Gets the x-coordinate of the right edge of the text in the rendered line.</summary>
      <returns>The x-coordinate of the right edge of the text in the rendered line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextTop">
      <summary>Gets the y-coordinate of the top of the text in the rendered line.</summary>
      <returns>The y-coordinate of the top of the text in the rendered line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextWidth">
      <summary>Gets the horizontal distance between <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight" /> and <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft" />.</summary>
      <returns>The horizontal distance between <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight" /> and <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top">
      <summary>Gets the position of the top edge of this line in the text rendering coordinate system.</summary>
      <returns>The position of the top edge of this line in the text rendering coordinate system.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.VirtualSpaceWidth">
      <summary>Get the width of the virtual spaces at the end of this line.</summary>
      <returns>The width of the virtual spaces at the end of this line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.VisibilityState">
      <summary>Gets the visibility state of this rendered text line with respect to the top and bottom of the view.</summary>
      <returns>The visibility state of this rendered text line with respect to the top and bottom of the view.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> has been disposed.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Width">
      <summary>Gets the distance between the left and right edges of this line.</summary>
      <returns>The distance between the left and right edges of this line.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.LineTransform">
      <summary>Represents the transform from a formatted text line to a rendered text line.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" />.</summary>
      <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" />.</summary>
      <param name="topSpace">The amount of space required above the text of the line before applying <paramref name="verticalScale" />.</param>
      <param name="bottomSpace">The amount of space required below the text of the line before applying <paramref name="verticalScale" />.</param>
      <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" />.</summary>
      <param name="topSpace">The amount of space required above the text of the line before applying <paramref name="verticalScale" />.</param>
      <param name="bottomSpace">The amount of space required below the text of the line before applying <paramref name="verticalScale" />.</param>
      <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
      <param name="right">The x-coordinate of the right edge the line (typically the right edge of any adornment on the line that extends to the right of the line's text).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.BottomSpace">
      <summary>Gets the amount of space required below the text of the line before applying the <see cref="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale" /> factor.</summary>
      <returns>The amount of space required below the text of the line.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
      <summary>Combines two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects.</summary>
      <returns>The combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" />.</returns>
      <param name="transform1">The first <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> to combine.</param>
      <param name="transform2">The second <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> to combine.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects are the same.</summary>
      <returns>true if both objects are the same, otherwise false.</returns>
      <param name="obj">The object to compare for equality.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.op_Equality(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects are the same.</summary>
      <returns>true if both line transforms are the same, otherwise false.</returns>
      <param name="transform1">The first line transform.</param>
      <param name="transform2">The second line transform</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.op_Inequality(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects are different.</summary>
      <returns>true if the line transforms are different, otherwise false.</returns>
      <param name="transform1">The first line transform.</param>
      <param name="transform2">The second line transform.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.Right">
      <summary>Gets the x-coordinate of the effective right edge of the line.</summary>
      <returns>The x-coordinate of the effective right edge of the line.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.TopSpace">
      <summary>Gets the amount of space required above the text of the line before applying the <see cref="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale" /> factor.</summary>
      <returns>The amount of space required above the text of the line</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale">
      <summary>Gets the vertical scale factor to be applied to the text of the line and the space above and below the line.</summary>
      <returns>The vertical scale factor to be applied to the text of the line and the space above and below the line.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SequenceChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.IMappingSpan)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" />.</summary>
      <param name="span">The span that changed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="span" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs.Span">
      <summary>Gets the span over which tags have changed.</summary>
      <returns>The span over which tags have changed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.TextBounds">
      <summary>The bounds of a span of text in a given text line.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" />.</summary>
      <param name="leading">The x-coordinate of the leading edge of the bounding rectangle.</param>
      <param name="top">The y-coordinate of the top edge of the bounding rectangle.</param>
      <param name="bidiWidth">The distance between the leading and trailing edges of the bounding rectangle. This can be negative for right-to-left text.</param>
      <param name="height">The height of the rectangle. The height must be non-negative.</param>
      <param name="textTop">The top of the text, measured from the line that contains the text.</param>
      <param name="textHeight">The height of the text, measured from the line that contains the text.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="Leading" />, <paramref name="top" />, <paramref name="height" />, or <paramref name="bidiWidth" /> is not a valid number, or <paramref name="height" /> or <paramref name="textHeight" /> is negative or not a valid number.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Bottom">
      <summary>Gets the position of the bottom edge of the rectangle in the text rendering coordinate system.</summary>
      <returns>The position of the bottom edge of the rectangle in the text rendering coordinate system.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> objects are the same.</summary>
      <returns>true if both text bounds are the same, otherwise false.</returns>
      <param name="obj">The other text bounds.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.GetHashCode">
      <summary>Gets the hash code of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> object.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Height">
      <summary>Gets the distance between the top and bottom edges of the rectangle in the text rendering coordinate system.</summary>
      <returns>The distance between the top and bottom edges of the rectangle in the text rendering coordinate system.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.IsRightToLeft">
      <summary>Determines whether the character is a right-to-left character.</summary>
      <returns>true if the character is a right-to-left character, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Leading">
      <summary>Gets the position of the leading edge of the rectangle in the text rendering coordinate system.</summary>
      <returns>The position of the leading edge of the rectangle in the text rendering coordinate system.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Left">
      <summary>Gets the position of the left edge of the rectangle in the text rendering coordinate system.</summary>
      <returns>The position of the left edge of the rectangle in the text rendering coordinate system.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.op_Equality(Microsoft.VisualStudio.Text.Formatting.TextBounds,Microsoft.VisualStudio.Text.Formatting.TextBounds)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> objects are the same.</summary>
      <returns>true if the text bounds are the same, otherwise false.</returns>
      <param name="bounds1">The first text bounds.</param>
      <param name="bounds2">The second text bounds.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.op_Inequality(Microsoft.VisualStudio.Text.Formatting.TextBounds,Microsoft.VisualStudio.Text.Formatting.TextBounds)">
      <summary>Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> objects are different.</summary>
      <returns>true if the text bounds are different, otherwise false.</returns>
      <param name="bounds1">The first text bounds.</param>
      <param name="bounds2">The second text bounds.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Right">
      <summary>Gets the position of the right edge of the rectangle in the text rendering coordinate system.</summary>
      <returns>The position of the right edge of the rectangle in the text rendering coordinate system.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextBottom">
      <summary>Gets the bottom of the text on the line containing the characters.</summary>
      <returns>The bottom of the text on the line containing the characters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextHeight">
      <summary>Gets the height of the text on the line containing the characters.</summary>
      <returns>The height of the text on the line containing the characters.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextTop">
      <summary>Gets the top of the text on the line containing the text.</summary>
      <returns>The top of the text on the line containing the text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Top">
      <summary>Gets the position of the top edge of the rectangle in the text rendering coordinate system.</summary>
      <returns>The position of the top edge of the rectangle in the text rendering coordinate system.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.ToString">
      <summary>Converts the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> object to a string.</summary>
      <returns>The string representation of the text bounds.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Trailing">
      <summary>Gets the position of the trailing edge of the rectangle in the text rendering coordinate system.</summary>
      <returns>The position of the trailing edge of the rectangle in the text rendering coordinate system.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Width">
      <summary>Gets the distance between the leading and trailing edges of the rectangle in the text rendering coordinate system.</summary>
      <returns>The distance between the leading and trailing edges of the rectangle in the text rendering coordinate system.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange">
      <summary>Defines the possible types of change in a rendered text line between one layout and another.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.None">
      <summary>No change type is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.NewOrReformatted">
      <summary>The line is new or reformatted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.Translated">
      <summary>The text has not changed, but some change has caused the y-coordinate to change. For example, a line was inserted above this line, or the user scrolled the view up or down.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Formatting.VisibilityState">
      <summary>Specifies the visibility of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> with respect to the visible area when the line was rendered.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.Unattached">
      <summary>The line is unattached, that is, it was not formatted as part of a layout in the text view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.Hidden">
      <summary>The line is hidden, that is, not visible inside the view. Lines are also hidden when their bottom edge is even with the top of the view or their top edge is even with the bottom of the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.PartiallyVisible">
      <summary>The line is partially visible, that is, some portion of the line extends above the top of the view or below the bottom of the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.FullyVisible">
      <summary>The line is fully visible.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch">
      <summary>Defines an incremental search operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.AppendCharAndSearch(System.Char)">
      <summary>Extends the current term being searched for by one character. If a new term is matched, it is selected. The selection can be used to access the match.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> that contains information about whether the search term was found and whether the search wrapped around the beginning or end of the buffer.</returns>
      <param name="toAppend">The character to append to the current search term.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Clear">
      <summary>Clears the existing search term without changing the selection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.DeleteCharAndSearch">
      <summary>Removes the last character of the current search term and updates the search results based on the new term.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> that indicates whether the new search term was found and whether the search wrapped around the beginning or end of the buffer.</returns>
      <exception cref="T:System.InvalidOperationException">The search string is empty. To avoid this exception, check the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchString" /> property before calling this method.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Dismiss">
      <summary>Terminates an incremental search operation.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Dismiss" /> was called before <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Start" />. A search must be started before it can be terminated.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.IsActive">
      <summary>Determines whether an incremental search is in process.</summary>
      <returns>true if an incremental search is in process, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchDirection">
      <summary>Gets or sets the direction of the incremental search.</summary>
      <returns>The direction of the incremental search.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchString">
      <summary>Gets or sets the current search term.</summary>
      <returns>The current search term.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SelectNextResult">
      <summary>Selects the next result in an incremental search operation. The matched term will be selected.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> indicating whether the newly selected item caused a wrap around the end or beginning of the document and whether the search looped around the first item found. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Start">
      <summary>Starts an incremental search operation, and marks the position of the caret as the starting position for the search.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.TextView">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> associated with this search. </summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> associated with this search.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService">
      <summary>Used to get or create an incremental search service for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. There will always be a maximum of one <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService.GetIncrementalSearch(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. If there is no <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> for the view, one will be created.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> associated with the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which the incremental search is to be performed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection">
      <summary>Determines the direction of the incremental search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection.Forward">
      <summary>Forward search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection.Backward">
      <summary>Backward search.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult">
      <summary>Consolidates the result of an incremental search operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> with the specified properties.</summary>
      <param name="passedEndOfBuffer">Whether or not the search has wrapped around the end of the buffer.</param>
      <param name="passedStartOfBuffer">Whether or not the search has wrapped around the start of the buffer.</param>
      <param name="passedStartOfSearch">Whether or not the search passed the first item found.</param>
      <param name="resultFound">Whether or not the search was successful.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.Equals(System.Object)">
      <summary>Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> objects are the same.</summary>
      <returns>true if both objects have the same content, otherwise false.</returns>
      <param name="obj">The object to be compared.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.GetHashCode">
      <summary>Gets the hash code for the object.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.op_Equality(Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult,Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult)">
      <summary>Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> objects are the same.</summary>
      <returns>true if both objects have the same content, otherwise false.</returns>
      <param name="first">The first result.</param>
      <param name="second">The second result.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.op_Inequality(Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult,Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult)">
      <summary>Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> objects are different.</summary>
      <returns>true if both objects have different content, otherwise false.</returns>
      <param name="first">The first result.</param>
      <param name="second">The second result.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedEndOfBuffer">
      <summary>Determines whether the search wrapped around the end of the buffer to its beginning.</summary>
      <returns>true if the search has wrapped around the end of the buffer, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedStartOfBuffer">
      <summary>Determines whether the search wrapped around the start of the buffer to its end.</summary>
      <returns>true if the search has wrapped around the start of the buffer to its end.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedStartOfSearch">
      <summary>Determines whether the search passed the first item found.</summary>
      <returns>true if the search has passed the first item found.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.ResultFound">
      <summary>Determines whether the search for the term was successful.</summary>
      <returns>true if the search was successful.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations">
      <summary>Defines operations relating to the editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive">
      <summary>Adds an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive" /> to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> for the buffer that will revert the selection to the current state when it is redone.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive">
      <summary>Adds an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive" /> to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> for the buffer that will revert the selection to the current state when it is undone.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Backspace">
      <summary>Deletes a character to the left of the current caret.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanCut">
      <summary>Determines whether a cut operation is possible.</summary>
      <returns>true if a cut operation is possible, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanDelete">
      <summary>Determines whether a delete operation is possible.</summary>
      <returns>true if a delete operation is possible, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanPaste">
      <summary>Determines whether a paste operation is possible.</summary>
      <returns>true if a paste operation is possible, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Capitalize">
      <summary>Converts all the characters in the selection to lowercase, then converts the first character in each word in the selection to uppercase. If the selection is empty, then it makes the next character uppercase.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ConvertSpacesToTabs">
      <summary>Converts spaces to tabs in the selection, or, if the selection is empty, on the line the caret is on.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ConvertTabsToSpaces">
      <summary>Converts tabs to spaces in the selection, or, if the selection is empty, on the line the caret is on.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CopySelection">
      <summary>Copies the selected text to the clipboard.</summary>
      <returns>true if the clipboard operation succeeded, otherwise false.</returns>
      <exception cref="T:System.InsufficientMemoryException">There is not sufficient memory to complete the operation.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CutFullLine">
      <summary>If there is a selection, deletes all the lines touched by the selection, including line break characters, and copies the text to the clipboard. Otherwise, deletes the line the caret is on, including the line break characters, and copies the text to the clipboard.</summary>
      <returns>true if the edit and the clipboard operation both succeeded, otherwise false.</returns>
      <exception cref="T:System.InsufficientMemoryException">There is not sufficient memory to complete the operation.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CutSelection">
      <summary>Cuts the selected text.</summary>
      <returns>true if the edit and the clipboard operation both succeeded, otherwise false.</returns>
      <exception cref="T:System.InsufficientMemoryException">There is not sufficient memory to complete the operation.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DecreaseLineIndent">
      <summary>If there is a multi-line selection, removes indentation from every line in the selection, otherwise removes indentation from the line the caret is on.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Delete">
      <summary>Deletes the selection if there is one. If there is no selection, deletes the next character in the buffer if one exists.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteBlankLines">
      <summary>Deletes all empty lines or lines that contain only white space in the selection.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteFullLine">
      <summary>If there is a selection, deletes all the lines touched by the selection, including line break characters. Otherwise, deletes the line the caret is on, including the line break characters.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteHorizontalWhiteSpace">
      <summary>Deletes all white space from the beginnings and ends of the selected lines, and trims internal white space.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteToBeginningOfLine">
      <summary>Deletes the line the caret is on, up to the previous line break character and the selection, if present.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteToEndOfLine">
      <summary>Deletes the line the caret is on, up to the line break character and the selection, if present.</summary>
      <returns>true if the operation succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteWordToLeft">
      <summary>Deletes the word to the left of the current caret position.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteWordToRight">
      <summary>Deletes the word to the right of the current caret position.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ExtendSelection(System.Int32)">
      <summary>Extends the current selection span to the specified position.</summary>
      <param name="newEnd">The new character position to which the selection is to be extended.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newEnd" /> is less than 0.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.GetWhitespaceForVirtualSpace(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
      <summary>Gets a string composed of whitespace characters that would be inserted to fill the gap between a given <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> and the closest <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> on the same line.</summary>
      <returns>A string composed of whitespace characters that would be inserted to fill the gap between a given <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> and the closest <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> on the same line.</returns>
      <param name="point">The point in virtual space</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.GotoLine(System.Int32)">
      <summary>Moves the caret to the start of the specified line.</summary>
      <param name="lineNumber">The line number to which to move the caret.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lineNumber" /> is less than zero or greater than the number of the last line in the text buffer.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.IncreaseLineIndent">
      <summary>If there is a multi-line selection, adds indentation to every line in the selection, otherwise adds indentation to the line the caret is on.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Indent">
      <summary>If there is a multi-line selection indents the selection, otherwise inserts a tab at the caret location.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertFile(System.String)">
      <summary>Inserts the contents of a file on disk into the text buffer.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
      <param name="filePath">The path of the file on disk.</param>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="filePath" /> was not found.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="filePath" /> specifies a file that is read-only, or this operation is not supported on the current platform, or <paramref name="filePath" /> specifies a directory, or the caller does not have the required permission.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="filePath" /> is in an invalid format. </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertNewLine">
      <summary>Inserts a new line at the current caret position.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertProvisionalText(System.String)">
      <summary>Inserts the given text at the current caret position as provisional text.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
      <param name="text">The text to be inserted in the buffer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertText(System.String)">
      <summary>Inserts the given text at the current caret position.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
      <param name="text">The text to be inserted in the buffer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertTextAsBox(System.String,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@)">
      <summary>Inserts the specified text at the current caret position as a box.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
      <param name="text">The text to be inserted in the buffer. Each "line" from the text will be written out a line at a time.</param>
      <param name="boxStart">The start of the newly inserted box.</param>
      <param name="boxEnd">The end of the newly inserted box.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MakeLowercase">
      <summary>Converts uppercase letters to lowercase in the selection. If the selection is empty, makes the next character lowercase.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MakeUppercase">
      <summary>Converts lowercase letters to uppercase in the selection. If the selection is empty, makes the next character uppercase.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCaret(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,System.Boolean)">
      <summary>Moves the caret to the given line at the given offset.</summary>
      <param name="textLine">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> on which to place the caret.</param>
      <param name="horizontalOffset">The horizontal location in the given <paramref name="textLine" /> to which to move the caret.</param>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textLine" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCurrentLineToBottom">
      <summary>Moves the current line to the bottom of the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCurrentLineToTop">
      <summary>Moves the current line to the top of the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveLineDown(System.Boolean)">
      <summary>Moves the caret one line down.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveLineUp(System.Boolean)">
      <summary>Moves the caret one line up.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToBottomOfView(System.Boolean)">
      <summary>Moves the caret to the last fully-visible line of the view.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToEndOfDocument(System.Boolean)">
      <summary>Moves the caret at the end of the document.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToEndOfLine(System.Boolean)">
      <summary>Moves the caret to the end of the line.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToHome(System.Boolean)">
      <summary>Moves the caret to the first text column on the line. </summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToLastNonWhiteSpaceCharacter(System.Boolean)">
      <summary>Moves the caret to just before the last non-white space character in the line.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToNextCharacter(System.Boolean)">
      <summary>Moves the caret to the next character.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToNextWord(System.Boolean)">
      <summary>Moves the caret to the next word.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToPreviousCharacter(System.Boolean)">
      <summary>Moves the caret to the previous character.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToPreviousWord(System.Boolean)">
      <summary>Moves the caret to the previous word.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfDocument(System.Boolean)">
      <summary>Moves the caret to the start of the document.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfLine(System.Boolean)">
      <summary>Moves the caret to the start of the line.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfLineAfterWhiteSpace(System.Boolean)">
      <summary>Moves the caret to the first non-whitespace character of the line.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfNextLineAfterWhiteSpace(System.Boolean)">
      <summary>Moves the caret to the first non-whitespace character in the next line.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfPreviousLineAfterWhiteSpace(System.Boolean)">
      <summary>Moves the caret to the first non-whitespace character on the previous line.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToTopOfView(System.Boolean)">
      <summary>Moves the caret to the first fully-visible line of the view.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.NormalizeLineEndings(System.String)">
      <summary>Replaces all the line endings that do not match the specified string.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
      <param name="replacement">The character sequence with which to replace the line endings.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.OpenLineAbove">
      <summary>Inserts a new line at the start of the line the caret is on.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.OpenLineBelow">
      <summary>Inserts a new line at the end of the line the caret is on.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Options">
      <summary>Gets the options specific to this view.</summary>
      <returns>The options specific to this view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.PageDown(System.Boolean)">
      <summary>Moves the caret one page down.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.PageUp(System.Boolean)">
      <summary>Moves the caret one page up.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Paste">
      <summary>Pastes text from the clipboard to the text buffer.</summary>
      <returns>true if the edit and the clipboard operation both succeeded, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ProvisionalCompositionSpan">
      <summary>Gets the span of the current provisional composition, or null if there is no provisional composition).</summary>
      <returns>The span of the current provisional composition, or null if there is no provisional composition).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceAllMatches(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Replaces all matching occurrences of the given string.</summary>
      <returns>The number of matches found.</returns>
      <param name="searchText">The text to match.</param>
      <param name="replaceText">The replacement text.</param>
      <param name="matchCase">true if the search should match case, otherwise false.</param>
      <param name="matchWholeWord">true if the search should match whole words, otherwise false.</param>
      <param name="useRegularExpressions">true if the search should use regular expressions, otherwise false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchText" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="useRegularExpressions" /> is true and <paramref name="searchText" /> is an invalid regular expression.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceSelection(System.String)">
      <summary>Replaces the text selection with the specified text.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
      <param name="text">The text to use as a replacement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceText(Microsoft.VisualStudio.Text.Span,System.String)">
      <summary>Replaces text from the specified span with the specified text.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
      <param name="replaceSpan">The span of text to be replaced.</param>
      <param name="text">The new text. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ResetSelection">
      <summary>Resets any selection in the text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollColumnLeft">
      <summary>Scrolls the view one column to the left.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollColumnRight">
      <summary>Scrolls the view one column to the right.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollDownAndMoveCaretIfNecessary">
      <summary>Scrolls the view down by one line and repositions the caret to the first fully-visible line in the view, if it is scrolled off the page.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineBottom">
      <summary>Scrolls the line the caret is on, so that it is the last fully-visible line in the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineCenter">
      <summary>Scrolls the line the caret is on, so that it is centered in the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineTop">
      <summary>Scrolls the line the caret is on, so that it is the first fully-visible line in the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollPageDown">
      <summary>Scrolls the view down a page without moving the caret.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollPageUp">
      <summary>Scrolls the view up a page without moving the caret.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollUpAndMoveCaretIfNecessary">
      <summary>Scrolls the view up by one line and repositions the caret, if it is scrolled off the page, to the last fully-visible line in the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAll">
      <summary>Selects all text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
      <summary>Selects from the given anchor point to the active point, moving the caret to the new active point of the selection. The selected span will be made visible.</summary>
      <param name="anchorPoint">The anchor point of the new selection.</param>
      <param name="activePoint">The active point of the new selection and position of the caret.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Editor.TextSelectionMode)">
      <summary>Selects from the specified anchor point to the active point, moving the caret to the new active point of the selection, and ensuring that the selection is in the specified selection mode, and making the selected span visible.</summary>
      <param name="anchorPoint">The anchor point of the new selection.</param>
      <param name="activePoint">The active point of the new selection and position of the caret.</param>
      <param name="selectionMode">The selection mode of the new selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Editor.TextSelectionMode,System.Nullable{Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions})">
      <summary>Selects from the given anchor point to active point, moving the caret to the new active point of the selection, ensuring that the selection is in the specified selection mode and making the selected span visible.</summary>
      <param name="anchorPoint">The anchor point of the new selection.</param>
      <param name="activePoint">The active point of the new selection and position of the caret.</param>
      <param name="selectionMode">The selection mode of the new selection.</param>
      <param name="scrollOptions">The scrolling to be done in the view after the selection is made. If null, no scrolling is done.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectCurrentWord">
      <summary>Selects the current word.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectedText">
      <summary>Gets the selected text.</summary>
      <returns>The selected text.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectEnclosing">
      <summary>Selects the enclosing parent.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectFirstChild">
      <summary>Selects the first child.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Boolean)">
      <summary>Selects the specified line.</summary>
      <param name="viewLine">The line to select.</param>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewLine" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectNextSibling(System.Boolean)">
      <summary>Selects the next sibling.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectPreviousSibling(System.Boolean)">
      <summary>Selects the previous sibling.</summary>
      <param name="extendSelection">If true, the selection is extended when the caret is moved; if false, the selection is not extended.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SwapCaretAndAnchor">
      <summary>Swaps the caret from its current position to the other end of the selection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Tabify">
      <summary>Converts the leading white space to tabs on all lines touched by the selection and caret.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TextView">
      <summary>Gets the text view on which these operations work.</summary>
      <returns>The text view on which these operations work.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ToggleCase">
      <summary>Switches the case of each character in the selection. If the selection is empty, changes the case of the next character.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeCharacter">
      <summary>Transposes the character at the cursor with the next character. </summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeLine">
      <summary>Transposes the line containing the cursor with the next line. </summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeWord">
      <summary>Transposes the current word with the next one. </summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Unindent">
      <summary>Unindents the text.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Untabify">
      <summary>Converts the leading whitespace to spaces on all lines touched by the selection and the caret.</summary>
      <returns>true if the edit succeeded, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomIn">
      <summary>Zooms in to the text view by a scaling factor of 10%.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomOut">
      <summary>Zooms out of the text view by a scaling factor of 10%.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomTo(System.Double)">
      <summary>Applies the specified zoom level to the text view.</summary>
      <param name="zoomLevel">The zoom level to apply, between 20% to 400%.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService">
      <summary>A service that provides <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" /> objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService.GetEditorOperations(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" /> objects for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed">
      <summary>Represents a collapsed <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsed.CollapsedChildren">
      <summary>Gets the children of this collapsed region that are also collapsed.</summary>
      <returns>The children of this collapsed region that are also collapsed.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if this collapsed region has been expanded.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible">
      <summary>Represents a span that may be collapsed.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.CollapsedForm">
      <summary>Gets the data object for the collapsed UI.</summary>
      <returns>The data object for the collapsed UI.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.CollapsedHintForm">
      <summary>Gets the data object for the collapsed UI tooltip.</summary>
      <returns>The data object for the collapsed UI tooltip.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.Extent">
      <summary>Gets the extent of this collapsible region.</summary>
      <returns>The extent of this collapsible region.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.IsCollapsed">
      <summary>Determines whether this outlining region is collapsed.</summary>
      <returns>true if this outlining region is collapsed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.IsCollapsible">
      <summary>Determines whether this region can be collapsed.</summary>
      <returns>true if this region can be collapsed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.Tag">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag" /> that was used to produce this collapsible region.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager">
      <summary>Provides outlining functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.CollapseAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsible})">
      <summary>Collapses all the regions in the specified span that match the specified predicate.</summary>
      <returns>The newly-collapsed regions.</returns>
      <param name="span">The span.</param>
      <param name="match">The predicate to match.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.Enabled">
      <summary>Determines whether outlining is enabled.</summary>
      <returns>true if outlining is enabled, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.Expand(Microsoft.VisualStudio.Text.Outlining.ICollapsed)">
      <summary>Expands the collapsible span.</summary>
      <returns>The newly-expanded span.</returns>
      <param name="collapsible">The region to expand.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.ExpandAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsed})">
      <summary>Expands all the regions in the specified span that match the specified predicate.</summary>
      <returns>The newly-expanded regions.</returns>
      <param name="span">The span.</param>
      <param name="match">The predicate to match.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
      <summary>Gets all the regions that intersect the given collection of spans, whether or not they are collapsed.</summary>
      <returns>A sorted sequence of all intersecting collapsible regions.</returns>
      <param name="spans">The collection of spans.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Boolean)">
      <summary>Gets all the regions that intersect the given collection of spans, whether or not they are collapsed.</summary>
      <returns>A sorted sequence of all intersecting collapsible regions.</returns>
      <param name="spans">The collection of spans.</param>
      <param name="exposedRegionsOnly">true if this method should return only top-level regions (regions that aren't inside another collapsed region).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Gets all the regions that intersect the given span, whether or not they are collapsed.</summary>
      <returns>A sorted sequence of all intersecting collapsible regions.</returns>
      <param name="span">The span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
      <summary>Gets all the regions that intersect the given span, whether or not they are collapsed.</summary>
      <returns>A sorted sequence of all intersecting collapsible regions.</returns>
      <param name="span">The span.</param>
      <param name="exposedRegionsOnly">true if this method should return only top-level regions (regions that aren't inside another collapsed region).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
      <summary>Gets all the collapsed regions that intersect the given collection of spans.</summary>
      <returns>A sorted sequence of collapsed regions.</returns>
      <param name="spans">The collection of spans.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Boolean)">
      <summary>Gets all the collapsed regions that intersect the given collection of spans.</summary>
      <returns>A sorted sequence of collapsed regions.</returns>
      <param name="spans">The collection of spans.</param>
      <param name="exposedRegionsOnly">true if this method should return only top-level regions (regions that aren't inside another collapsed region).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Gets all the collapsed regions that intersect the given span.</summary>
      <returns>A sorted sequence of collapsed regions.</returns>
      <param name="span">The span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
      <summary>Gets all the collapsed regions that intersect the given span.</summary>
      <returns>A sorted sequence of collapsed regions.</returns>
      <param name="span">The span.</param>
      <param name="exposedRegionsOnly">true if this method should return only top-level regions (regions that aren't inside another collapsed region).</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.OutliningEnabledChanged">
      <summary>Occurs when outlining has been enabled or disabled.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsChanged">
      <summary>Occurs when there are changes in the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions on the corresponding elision buffer.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsCollapsed">
      <summary>Occurs when an <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> region is collapsed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsExpanded">
      <summary>Occurs when an <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed" /> region is expanded.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.TryCollapse(Microsoft.VisualStudio.Text.Outlining.ICollapsible)">
      <summary>Tries to collapse a given region.</summary>
      <returns>The newly collapsed span if successful, otherwise null.</returns>
      <param name="collapsible">The region to collapse.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService">
      <summary>Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager" /> for a given view model.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService.GetOutliningManager(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager" /> for the given view.</summary>
      <returns>A valid outlining manager if the view model supports outlining, otherwise null.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> from which to get the outlining manager.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textView" /> is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.OutliningEnabledChanged" /> event. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs" /> for the specified change.</summary>
      <param name="enabled">true if outlining has been enabled, false if it has been disabled.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs.Enabled">
      <summary>Determines whether outlining has been enabled or disabled.</summary>
      <returns>true if outlining has been enabled, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.</summary>
      <param name="affectedSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> over which collapsible regions have changed.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs.AffectedSpan">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> over which collapsible spans have changed.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> over which collapsible spans have changed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsCollapsed" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsed})">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed" /> regions.</summary>
      <param name="collapsedRegions">The newly-collapsed regions.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs.CollapsedRegions">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed" /> regions that are now collapsed.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed" /> regions that are now collapsed.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs">
      <summary>Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsExpanded" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsible})">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions.</summary>
      <param name="expandedRegions">The newly-expanded regions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsible},System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions.</summary>
      <param name="expandedRegions">The newly-expanded regions.</param>
      <param name="removalPending">true if these regions are being expanded as part of being removed, otherwise false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.ExpandedRegions">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions which are now expanded.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions which are now expanded.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.RemovalPending">
      <summary>Determines whether the regions are being expanded because they are being removed.</summary>
      <returns>true if the regions are being expanded because they are being removed, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag">
      <summary>An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IErrorTag" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag" /> of type <see cref="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.SyntaxError" /> with no tooltip content.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor(System.String)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag" /> of the specified type with no tooltip content.</summary>
      <param name="errorType">The type of error to use,</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag" /> of the specified type.</summary>
      <param name="errorType">The type of error to use.</param>
      <param name="toolTipContent">The tooltip content to display. May be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="errorType" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.ErrorTag.ErrorType">
      <summary>Gets the type of error to use.</summary>
      <returns>The type of error to use.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.ErrorTag.ToolTipContent">
      <summary>Gets the content to use when displaying a tooltip for this error.</summary>
      <returns>The content to use when displaying a tooltip for this error.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.IErrorTag">
      <summary>Represents an error, which is used to place squiggle adornments on the view.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ErrorType">
      <summary>Gets the type of error to use.</summary>
      <returns>The type of error to use.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ToolTipContent">
      <summary>Gets the content to use when displaying a tooltip for this error.</summary>
      <returns>The content to use when displaying a tooltip for this error.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag">
      <summary>Provides a tag for outlining regions.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.CollapsedForm">
      <summary>Gets the data object for the collapsed UI. If the default is set, returns null.</summary>
      <returns>The data object for the collapsed UI. If the default is set, returns null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.CollapsedHintForm">
      <summary>Gets the data object for the collapsed UI tooltip. If the default is set, returns null.</summary>
      <returns>The data object for the collapsed UI tooltip. If the default is set, returns null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.IsDefaultCollapsed">
      <summary>Determines whether the region is collapsed by default.</summary>
      <returns>true if the region is collapsed by default, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.IsImplementation">
      <summary>Determines whether a region is an implementation region.</summary>
      <returns>true if a region is an implementation region, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag">
      <summary>Represents the text marker tag, which is used to place text marker adornments on a view.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag.Type">
      <summary>Gets the type of adornment to use.</summary>
      <returns>The type of adornment to use.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService">
      <summary>A service that creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" /> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView)">
      <summary>Creates a tag aggregator for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that aggregates tags of the given type.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" /> of the correct type for <paramref name="textView" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" />.</param>
      <typeparam name="T">The type of tag to aggregate.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions)">
      <summary>Creates a tag aggregator for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> and with the given options that aggregates tags of the given type.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" /> of the correct type for <paramref name="textView" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" />.</param>
      <param name="options">The options to use for the newly created aggregator.</param>
      <typeparam name="T">The type of tag to aggregate.</typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> for a given buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
      <summary>Creates a tag provider for the specified view and buffer.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" /> of the correct type for <paramref name="textView" />.</returns>
      <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
      <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</param>
      <typeparam name="T">The type of the tag.</typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag">
      <summary>Represents a tag for outlining regions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor(System.Boolean,System.Boolean,System.Object,System.Object)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag" /> with the specified default collapsed state.</summary>
      <param name="isDefaultCollapsed">true if the region is collapsed by default, otherwise false.</param>
      <param name="isImplementation">true if the region is an implementation, otherwise false.</param>
      <param name="collapsedForm">The data object for the collapsed UI.</param>
      <param name="collapsedHintForm">The data object for the collapsed UI tooltip.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor(System.Object,System.Object)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag" /> with the specified objects.</summary>
      <param name="collapsedForm">The data object for the collapsed UI.</param>
      <param name="collapsedHintForm">The data object for the collapsed UI tooltip.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.CollapsedForm">
      <summary>Gets the data object for the collapsed UI. </summary>
      <returns>The data object for the collapsed UI. If the default is set, returns null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.CollapsedHintForm">
      <summary>Gets the data object for the collapsed UI tooltip. If the default is set, returns null.</summary>
      <returns>The data object for the collapsed UI tooltip. If the default is set, returns null.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.IsDefaultCollapsed">
      <summary>Determines whether the region is collapsed by default.</summary>
      <returns>true if the region is collapsed by default, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.IsImplementation">
      <summary>Determines whether a region is an implementation region.</summary>
      <returns>true if a region is an implementation region, otherwise false.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag">
      <summary>Represents a tag for a space-negotiating adornment. The tag is used to provide space for positioning the adornment in a view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualStudio.Text.PositionAffinity,System.Object,System.Object)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag" /> with the specified properties.</summary>
      <param name="width">The width of the tag in pixels.</param>
      <param name="topSpace">The space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
      <param name="baseline">The baseline of the space-negotiating adornment.</param>
      <param name="textHeight">The height in pixels of the text portion of the space-negotiating adornment.</param>
      <param name="bottomSpace">The space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
      <param name="affinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the space-negotiating adornment.</param>
      <param name="identityTag">A unique object associated with the space-negotiating adornment, used by <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentBounds(System.Object)" />.</param>
      <param name="providerTag">A unique object identifying the provider of the adornment, used by <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)" />).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Affinity">
      <summary>Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the space-negotiating adornment.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the space-negotiating adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Baseline">
      <summary>Gets the baseline of the space-negotiating adornment.</summary>
      <returns>The baseline of the space-negotiating adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.BottomSpace">
      <summary>Gets the amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>The amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.IdentityTag">
      <summary>Gets a unique object associated with the space-negotiating adornment, which is used by <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentBounds(System.Object)" />.</summary>
      <returns>A unique object associated with the space-negotiating adornment, which is used by <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentBounds(System.Object)" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.ProviderTag">
      <summary>Gets a unique object that identifies the provider of the adornment.</summary>
      <returns>A unique object that identifies the provider of the adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TextHeight">
      <summary>Gets the height of the text portion of the space-negotiating adornment.</summary>
      <returns>The height of the text portion of the space-negotiating adornment.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TopSpace">
      <summary>Gets the amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</summary>
      <returns>The amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Width">
      <summary>Gets the width of the adornment.</summary>
      <returns>The width of the adornment.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag">
      <summary>Represents the text marker tag, which is used to place text marker adornments on a view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.#ctor(System.String)">
      <summary>Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag" /> of the given type.</summary>
      <param name="type">The type of text marker to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.Type">
      <summary>Gets the type of adornment to use.</summary>
      <returns>The type of adornment to use.</returns>
    </member>
  </members>
</doc>